{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/core/permission/valve-introduction/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>deepstream uses a powerful permission-language called Valve that allows you to specify which user can perform which action with which data.</p>\n<p>With Valve you can</p>\n<ul>\n<li>Restrict access for individual users or groups</li>\n<li>Permission individual actions (e.g. write, publish or listen)</li>\n<li>Permission individual records, events or rpcs</li>\n<li>validate incoming data</li>\n<li>compare against stored data</li>\n</ul>\n<h2 id=\"requirements\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h2>\n<p>For this tutorial it’s helpful to know your way around the deepstream <a href=\"/docs/server/configuration/\">\nconfiguration</a> as we’ll need to tell\nthe server where we stored our permissioning rules. deepstream supports a\nvariety of communication concepts such as data-sync, publish-subscribe or request-response and <em>Valve</em> is flexible enough to allow different rules for each concept. This guide will mostly focus on <a href=\"/tutorials/core/datasync/records/\">records</a>, so it’d be good to familiarize yourself with them. Since permissioning is fundamentally about the rights of individual clients, it would also be good to know how <a href=\"/tutorials/core/security/\">user authentication</a> works in deepstream.</p>\n<h3 id=\"lets-start-with-an-example\"><a href=\"#lets-start-with-an-example\" aria-label=\"lets start with an example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s start with an example</h3>\n<p>Imagine you are running a discussion forum. To avoid vandalism and spam, users\nhave to wait 24 hours before they can create new posts or modify existing posts\nafter registration.\nThis means we’ll need to store the time the user registered along with their account information. This can be done dynamically using <a href=\"/tutorials/core/auth/http-webhook/\">http authentication</a>, but to keep things simple for this tutorial we’ll just store it as <code class=\"language-text\">timestamp</code> within the <code class=\"language-text\">serverData</code> using deepstream’s file-based authentication. A user entry in <code class=\"language-text\">conf/users.yml</code> might look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">JohnDoe</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> gvb4563Z\n\t<span class=\"token key atrule\">serverData</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">timestamp</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1482256123052</span></code></pre></div>\n<p>The snippet above shows a user <code class=\"language-text\">JohnDoe</code>. The server hosting the forum needs to\nknow when John Doe registered so there is a <code class=\"language-text\">timestamp</code> in the <code class=\"language-text\">serverData</code>\nsection.</p>\n<p>With deepstream as a back-end, it makes sense to store all forum threads in\nrecords (this is the <a href=\"/tutorials/core/datasync/records/\">data-sync concept</a>).\nThe following Valve snippet gives new users read-only access:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">record</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"*\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\t\t<span class=\"token key atrule\">listen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\t\t<span class=\"token key atrule\">delete</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\t\t<span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user.data.timestamp + 24 * 3600 * 1000 &lt; now\"</span>\n\t\t<span class=\"token key atrule\">write</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user.data.timestamp + 24 * 3600 * 1000 &lt; now\"</span></code></pre></div>\n<p>The <code class=\"language-text\">record</code> label signifies that the following rules apply to operations\ninvolving records; the pattern in the line below is a wild card matching every\nrecord name. In deepstream, records can be created, written to, deleted, read from, and you can listen to clients subscribing to a record. With Valve, you can have different permissions for each of these actions. In the Valve snippet\nabove, we permit everyone to read records, listen to subscription, and we\ndisallow record deletion. Finally, in the last two lines we grant users <code class=\"language-text\">create</code>\nand <code class=\"language-text\">write</code> permissions only if the accounts are older than 24 hours by\ncomparing the <code class=\"language-text\">timestamp</code> from the user’s <code class=\"language-text\">serverData</code> with the current time; <code class=\"language-text\">now</code> returns <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix time</a> like <code class=\"language-text\">Date.now()</code>\nin JavaScript, in milliseconds and 24 * 3600 * 1000 milliseconds are 24 hours.</p>\n<p>Lastly, we need to update the config file to make use of our custom\npermissions. Assuming we stored the permissions in the path\n<code class=\"language-text\">conf/permissions.yml</code>, we can instruct the deepstream server to load our\nsettings with the following lines in <code class=\"language-text\">conf/config.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permission</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> config\n\t<span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./permissions.yml</code></pre></div>\n<p>As you saw above, setting up deepstream’s file-based permissioning facilities\nrequires a file with permissioning rules, changes to the configuration file, and optionally some user-specific data.</p>\n<h2 id=\"permissioning\"><a href=\"#permissioning\" aria-label=\"permissioning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Permissioning</h2>\n<p>A generic Valve rule might look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">concept</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"pattern\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">action</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"expression\"</span></code></pre></div>\n<p>For every action, there is usually a corresponding function in the client API,\ne.g., the record <code class=\"language-text\">write</code> permissions are needed when calling <code class=\"language-text\">record.set()</code> in\nthe JavaScript client API. Every record, RPC, event, and authenticated user in\ndeepstream possesses a unique identifier (a name) and if Valve wants to find out\nif a certain operation is permitted, then</p>\n<ul>\n<li>it looks for the appropriate section in the permissioning file for records,\nRPCs, or events, and so on,</li>\n<li>it searches for the rule with the best match between pattern and identifier,\nand</li>\n<li>it evaluates the right-hand side expression.\nIn the following paragraphs, we present the possible actions.</li>\n</ul>\n<h3 id=\"file-format\"><a href=\"#file-format\" aria-label=\"file format permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File Format</h3>\n<p>The Valve language uses <a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> or\n<a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a> file format and the file with the\npermissioning rules must always contain rules for every possible identifier\nbecause the server will not supply default values. Note that the deepstream\nserver ships with a permissions file in <code class=\"language-text\">conf/permissions.yml</code> which permits\nevery action. Valve is designed to first and foremost use identifiers to match\npermissionable objects with corresponding rules. Thus, identifiers should be\nchosen such that rules can be selected only based on the identifier.</p>\n<h3 id=\"identifier-matching\"><a href=\"#identifier-matching\" aria-label=\"identifier matching permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Identifier Matching</h3>\n<p>Valve can match identifiers using fixed (sub-)strings, wild cards, and\nplaceholders (with deepstream, we call them <em>path variables</em>); these\nplaceholders can be used in the expressions. Suppose we store a user’s first\nname, middle name, and last name in the format\n<code class=\"language-text\">name/lastname/middlename/firstname</code> and have a look at the following Valve\ncode:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">presence</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">'name/Doe/$middlename/$firstname'</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">allow</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<p>User names that match this rule are, e.g., John Adam Doe (in this case, the\nrecord identifier is <code class=\"language-text\">name/Doe/Adam/John</code>) or Jane Eve Doe\n(<code class=\"language-text\">name/Doe/Eve/Jane</code>); in the former case, <code class=\"language-text\">$firstname === &#39;John&#39;</code> and in the\nlatter case <code class=\"language-text\">$firstname === &#39;Jane&#39;</code>.</p>\n<p>The wild card symbol in Valve is the asterisk (the symbol <code class=\"language-text\">*</code>) and <code class=\"language-text\">*</code> matches\nevery character until the end of the string. Placeholders start with a dollar\nsign followed by alphanumeric characters and match everything until a slash is\nencountered. In principle, identifiers can contain any character. Nevertheless,\nif you use an asterisk in an identifier, deepstream offers no way to match\nspecifically this character.</p>\n<h3 id=\"expressions\"><a href=\"#expressions\" aria-label=\"expressions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expressions</h3>\n<p>After identifier matching, deepstream will evaluate the right-hand side\nexpression. The expression can use a subset of JavaScript including</p>\n<ul>\n<li>arithmetic expressions,</li>\n<li>the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional operator</a>,</li>\n<li>comparison operators,</li>\n<li>the string functions <code class=\"language-text\">startsWith</code>, <code class=\"language-text\">endsWith</code>, <code class=\"language-text\">indexOf</code>, <code class=\"language-text\">match</code>,\n<code class=\"language-text\">toUpperCase</code>, <code class=\"language-text\">toLowerCase</code>, and <code class=\"language-text\">trim</code>.</li>\n</ul>\n<p>Additionally, you can use the current time (on the server) with <code class=\"language-text\">now</code>, you can\naccess deepstream data, and cross-reference records.</p>\n<p>Any deepstream client needs to log onto the server and the user data can be\naccessed with Valve but note that user’s are not necessarily authenticated\nunless this is forbidden in the config. You can check for authenticated users\nwith <code class=\"language-text\">user.isAuthenticated</code> (the ternary operator <code class=\"language-text\">?:</code> may prove useful when checking\nthis property). If a client authenticated, its user name can be accessed with\n<code class=\"language-text\">user.name</code> and its server data with <code class=\"language-text\">user.data</code>.  Additionally, Valve allows\nyou to examine data associated with a rule, e.g., for a record, this means one\ncan examine old and new value.  Since the data is dependent on the type (record,\nevent, or RPC, and so on), we will discuss this detail in the sections on the\nspecific types.</p>\n<p>Valve gives you the ability to cross reference data in your records. In your\nright-hand side expression, use the term <code class=\"language-text\">_(identifier)</code> to access the record\nwith the given identifier, where <code class=\"language-text\">identifier</code> is interpreted as a JavaScript\nexpression returning a string, e.g., <code class=\"language-text\">_(&#39;family/&#39; + $lastname)</code>. The cross\nreferenced record must exist. Note that cross references ignore Valve\npermissions meaning you gain indirect read access irrespective of the Valve\nrules.</p>\n<p>When evaluating expressions, you need to keep several pitfalls in mind. Using\nthe current time with <code class=\"language-text\">now</code> requires you to consider the usual <a href=\"http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time\">limitations of\ntime-dependent\noperations</a>\non computers and additionally, <code class=\"language-text\">now</code> is evaluated on the server; you should keep\nthis in mind whenever a client uses the <em>current</em> time in its code. Valve allows\nyou to cross reference stored data but this is computationally expensive. Thus,\nthe default config shipped with deepstream allows no more than three cross\nreferences as of December 21, 2016. Finally, the usual warnings about type\ncoercion (implicit type conversions), <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">JavaScript comparison\noperators</a>,\nand <a href=\"http://www.w3schools.com/js/js_numbers.asp\">floating-point arithmetic</a>\napply.</p>\n<h3 id=\"records\"><a href=\"#records\" aria-label=\"records permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Records</h3>\n<p>Records can be created, deleted, read from, written to, and you can <em>listen</em> to\nother clients subscribing to records (the <a href=\"/tutorials/core/datasync/records/\">record tutorial</a>\nelaborates on these operations and it explains the differences between\nunsubscribing from, discarding, and deleting records). The following snippet is\nthe default Valve code for records:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">record</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"*\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.record.getRecord()</span>\n\t\t<span class=\"token key atrule\">read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.record.getRecord(), record.get()</span>\n\t\t<span class=\"token key atrule\">write</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># record.set()</span>\n\t\t<span class=\"token key atrule\">listen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># record.listen()</span>\n\t\t<span class=\"token key atrule\">delete</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\"># record.delete()</span></code></pre></div>\n<p>In Valve, you can access the current record contents by referencing <code class=\"language-text\">oldData</code>\nand for the <code class=\"language-text\">write</code> operation, the modified record can be examined with <code class=\"language-text\">data</code>.</p>\n<p>Note that <code class=\"language-text\">create</code> permissions are only invoked by <code class=\"language-text\">getRecord()</code> if the\nrequested record does not exist, otherwise only reading rights are required.\nSimilarly, writes are always successful if the record does not have to be\nmodified, e.g., modified and unmodified record are identical. Moreover, if a\nwrite operation is rejected by the server, then the client must handle the\nresulting error message; otherwise the client copy of the record will be out of\nsync with the server state. Finally, do not mix up the <code class=\"language-text\">path</code> given to\n<code class=\"language-text\">record.get()</code> and <code class=\"language-text\">record.set()</code> with the record <em>identifier</em> that is used by\nValve.</p>\n<h3 id=\"user-presence\"><a href=\"#user-presence\" aria-label=\"user presence permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User Presence</h3>\n<p>deepstream can notify you when authenticated users log in. The permissioning key\nis called <code class=\"language-text\">presence</code> and the only option is to allow or disallow listening:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">presence</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"*\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">allow</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.subscribe()</span></code></pre></div>\n<h3 id=\"events\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h3>\n<p><a href=\"/tutorials/core/pubsub/\">Events</a> can be published and subscribed to.\nMoreover, a client emitting events may listen to event subscriptions. The\nactions can be permissioned in the section <code class=\"language-text\">events</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"*\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">publish</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.event.emit()</span>\n\t\t<span class=\"token key atrule\">subscribe</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.event.subscribe()</span>\n\t\t<span class=\"token key atrule\">listen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.event.listen()</span></code></pre></div>\n<p>The <code class=\"language-text\">publish</code> action allows the examination of the data by referencing <code class=\"language-text\">data</code> in\nthe expression.</p>\n<h3 id=\"rpcs\"><a href=\"#rpcs\" aria-label=\"rpcs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RPCs</h3>\n<p><a href=\"/tutorials/core/request-response/\">Remote procedure calls</a> can be provided\nor requested. The corresponding permissioning section is identified by the key\n<code class=\"language-text\">rpc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">rpc</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">\"*\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">provide</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.rpc.provide()</span>\n\t\t<span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true </span><span class=\"token comment\"># client.rpc.make()</span></code></pre></div>\n<h3 id=\"configuring-for-file-based-permissioning\"><a href=\"#configuring-for-file-based-permissioning\" aria-label=\"configuring for file based permissioning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring for File-Based Permissioning</h3>\n<p>To use file-based permissioning, the config file must contain the key\n<code class=\"language-text\">permission.type</code> with the value <code class=\"language-text\">config</code>. The name of the permissioning file\nmust be provided in the deepstream config file under the key\n<code class=\"language-text\">permission.options.path</code> and can be chosen arbitrarily. If a relative path is\nused to indicate its location, then this path uses the directory containing the\nconfig file as base directory.</p>\n<p>In summary, if the permissioning rules can be found in <code class=\"language-text\">conf/permissions.yml</code>\nand if the configuration file is <code class=\"language-text\">conf/config.yml</code>, then a minimal config for\nfile-based permissioning looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permission</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> config\n\t<span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./permissions.yml</code></pre></div>\n<h2 id=\"further-reading\"><a href=\"#further-reading\" aria-label=\"further reading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Reading</h2>\n<p>More compact introductions (or refreshers) are the tutorials <a href=\"/tutorials/core/permission/conf-simple/\"><em>Valve\nPermissioning Simple</em></a>, <a href=\"/tutorials/core/permission/conf-advanced/\"><em>Valve\nPermissioning Advanced</em></a>, and\n<a href=\"/tutorials/core/permissions/dynamic/\"><em>Dynamic Permissions using Valve</em></a>. To learn how to sent user-specific data using Valve, have a look at the <a href=\"/tutorials/guides/user-specific-data/\">user-specific data guide</a>.</p>","frontmatter":{"title":"Valve Introduction","description":"Learn permissions with Valve","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/core/permission/valve-introduction/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/20-core/30-permission/10-valve-introduction/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/core/permission/valve-introduction/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}