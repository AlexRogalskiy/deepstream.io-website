{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/upgrade-guides/v5/server/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>The following breaking changes were introduced in V5, sorted by easiest to hardest:</p>\n<h3 id=\"config-renames\"><a href=\"#config-renames\" aria-label=\"config renames permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config renames</h3>\n<p>The following configuration options were renamed in config.yml due to adding a spell checker in visual code:</p>\n<ul>\n<li>dependencyInitialisationTimeout to dependencyInitializationTimeout</li>\n</ul>\n<p>This way probably not used by anyone in V4, will be explained further down in it’s own section.</p>\n<ul>\n<li>path() to file()</li>\n</ul>\n<h3 id=\"usage-of-fileload-and-file-in-configyml\"><a href=\"#usage-of-fileload-and-file-in-configyml\" aria-label=\"usage of fileload and file in configyml permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usage of fileLoad() and file() in config.yml</h3>\n<p>In V4 we introduced the ability to have custom plugins, and as we added new ones we realized that we really\ndon’t want to be bogged down by simple details like reading config files, adjusting relative paths and ensuring\nthey exist. So we introduced two new helper macros. These have now been used for all files related mechanisms.</p>\n<h4 id=\"fileloadfilenameyml\"><a href=\"#fileloadfilenameyml\" aria-label=\"fileloadfilenameyml permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fileLoad(filename.yml)</h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># reading users and passwords from a file</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> file\n<span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># Path to the user file. Can be json, js or yml</span>\n  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> fileLoad(users.yml)</code></pre></div>\n<p>This macro will:</p>\n<ol>\n<li>Ensure the file exists</li>\n<li>Load the file from the file system</li>\n<li>Attempt to parse the file (currently supporting json and yml extensions), otherwise just leave it as text.</li>\n<li>If that all works, replaces the <code class=\"language-text\">fileLoad(users.yml)</code> with the actual data</li>\n</ol>\n<h4 id=\"filefilenameyml\"><a href=\"#filefilenameyml\" aria-label=\"filefilenameyml permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file(filename.yml)</h4>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> uws\n<span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> file(cert/key.pem)\n  <span class=\"token key atrule\">cert</span><span class=\"token punctuation\">:</span> file(cert/cert.pem)</code></pre></div>\n<p>This macro will inform deepstream that the file is relative to the <code class=\"language-text\">config.yml</code> file. This is not\nas useful as fileLoad but could be used if your plugin needs to reference an actual file (due to the\nlibrary underneath). </p>\n<p>The two places you would need to change these are:</p>\n<ol>\n<li>Valve</li>\n</ol>\n<p>V5:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span> fileLoad(permissions.yml)</code></pre></div>\n<p>V4:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> permissions.yml</code></pre></div>\n<ol start=\"2\">\n<li>User Authentication</li>\n</ol>\n<p>V5:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span> fileLoad(users.yml)</code></pre></div>\n<p>V4:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> users.yml</code></pre></div>\n<h3 id=\"no-longer-required-to-run-all-plugins-and-connection-endpoints-on-separate-ports\"><a href=\"#no-longer-required-to-run-all-plugins-and-connection-endpoints-on-separate-ports\" aria-label=\"no longer required to run all plugins and connection endpoints on separate ports permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>No longer required to run all plugins and connection endpoints on separate ports</h3>\n<p>This change is more of a infrastructure concern <em>IF</em> you used both HTTP and WS at the same time.</p>\n<p>If you use nginx please look at the <a href=\"/tutorials/devops/nginx/\">new simplified config</a> to get deepstream\nworking.</p>\n<p>The idea is now <em>EVERYTHING</em> (minus MQTT) runs on port 6020, which makes deployments much easier. This\nhas been introduced by the use of a HTTP Service.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">httpServer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> default\n  <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># url path for http health-checks, GET requests to this path will return 200 if deepstream is alive</span>\n    <span class=\"token key atrule\">healthCheckPath</span><span class=\"token punctuation\">:</span> /health<span class=\"token punctuation\">-</span>check\n    <span class=\"token comment\"># -- CORS --</span>\n    <span class=\"token comment\"># if disabled, only requests with an 'Origin' header matching one specified under 'origins'</span>\n    <span class=\"token comment\"># below will be permitted and the 'Access-Control-Allow-Credentials' response header will be</span>\n    <span class=\"token comment\"># enabled</span>\n    <span class=\"token key atrule\">allowAllOrigins</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token comment\"># a list of allowed origins</span>\n    <span class=\"token key atrule\">origins</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'https://example.com'</span>\n    <span class=\"token comment\"># Headers to copy over from websocket</span>\n    <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> user<span class=\"token punctuation\">-</span>agent\n    <span class=\"token key atrule\">ssl</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> fileLoad(/path/to/sslKey)\n      <span class=\"token key atrule\">cert</span><span class=\"token punctuation\">:</span> fileLoad(/path/to/sslCert)\n      <span class=\"token key atrule\">ca</span><span class=\"token punctuation\">:</span> fileLoad(/path/to/caAuth)</code></pre></div>\n<p>OR </p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">httpServer</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> uws\n  <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># url path for http health-checks, GET requests to this path will return 200 if deepstream is alive</span>\n    <span class=\"token key atrule\">healthCheckPath</span><span class=\"token punctuation\">:</span> /health<span class=\"token punctuation\">-</span>check\n    <span class=\"token comment\"># Headers to copy over from websocket</span>\n    <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> user<span class=\"token punctuation\">-</span>agent\n    <span class=\"token comment\"># Options required to create an ssl app</span>\n    <span class=\"token key atrule\">ssl</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> file(ssl/key.pem)\n      <span class=\"token key atrule\">cert</span><span class=\"token punctuation\">:</span> file(ssl/cert.pem)\n    <span class=\"token comment\">##  dhParams: ...</span>\n    <span class=\"token comment\">##  passphrase: ...</span></code></pre></div>\n<p>All websocket / HTTP services now hook into this server to provide their own functionality. This means you can run\nall the servers at the same time on different ports if you want (for example text, binary and JSON).</p>\n<p>The following config is now used for deepstream, please note the following important changes:</p>\n<h4 id=\"all-server-based-concepts-like-pathport-have-been-removed\"><a href=\"#all-server-based-concepts-like-pathport-have-been-removed\" aria-label=\"all server based concepts like pathport have been removed permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>All server based concepts like path/port have been removed</h4>\n<h4 id=\"type-name-changes\"><a href=\"#type-name-changes\" aria-label=\"type name changes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type name changes:</h4>\n<ol>\n<li>ws-websocket to ws-binary</li>\n<li>node-http to http</li>\n</ol>\n<h4 id=\"removal-of-uws-websocket-endpoint\"><a href=\"#removal-of-uws-websocket-endpoint\" aria-label=\"removal of uws websocket endpoint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removal of UWS Websocket Endpoint</h4>\n<p>We now use UWS or a node HTTP server to drive all of deepstream and not individual parts</p>\n<h4 id=\"path-changes-now-that-they-are-all-on-the-same-server-we-use-the-following-paths\"><a href=\"#path-changes-now-that-they-are-all-on-the-same-server-we-use-the-following-paths\" aria-label=\"path changes now that they are all on the same server we use the following paths permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Path changes. Now that they are all on the same server we use the following paths:</h4>\n<ol>\n<li>Binary (V4/V5 clients): <em>/deepstream</em></li>\n<li>Text (V3/V2 clients): <em>/v3-deepstream</em></li>\n<li>JSON (V4/V5 debug builds): <em>/deepstream-json</em></li>\n<li>HTTP Post/Get: <em>/api</em> and <em>/api/auth</em></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># Connection Endpoint Configuration</span>\n<span class=\"token key atrule\">connectionEndpoints</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ws<span class=\"token punctuation\">-</span>binary\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># url path websocket connections connect to</span>\n      <span class=\"token key atrule\">urlPath</span><span class=\"token punctuation\">:</span> /deepstream\n      <span class=\"token comment\"># the amount of milliseconds between each ping/heartbeat message</span>\n      <span class=\"token key atrule\">heartbeatInterval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span>\n      <span class=\"token comment\"># the amount of milliseconds that writes to sockets are buffered</span>\n      <span class=\"token key atrule\">outgoingBufferTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token comment\"># the maximum amount of bytes to buffer before flushing, stops the client from large enough packages</span>\n      <span class=\"token comment\"># to block its responsiveness</span>\n      <span class=\"token key atrule\">maxBufferByteSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100000</span>\n\n      <span class=\"token comment\"># Security</span>\n      <span class=\"token comment\"># amount of time a connection can remain open while not being logged in</span>\n      <span class=\"token key atrule\">unauthenticatedClientTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180000</span>\n      <span class=\"token comment\"># invalid login attempts before the connection is cut</span>\n      <span class=\"token key atrule\">maxAuthAttempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token comment\"># maximum allowed size of an individual message in bytes</span>\n      <span class=\"token key atrule\">maxMessageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1048576</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ws<span class=\"token punctuation\">-</span>text\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># url path websocket connections connect to</span>\n      <span class=\"token key atrule\">urlPath</span><span class=\"token punctuation\">:</span> /deepstream<span class=\"token punctuation\">-</span>v3\n      <span class=\"token comment\"># the amount of milliseconds between each ping/heartbeat message</span>\n      <span class=\"token key atrule\">heartbeatInterval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span>\n      <span class=\"token comment\"># the amount of milliseconds that writes to sockets are buffered</span>\n      <span class=\"token key atrule\">outgoingBufferTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token comment\"># the maximum amount of bytes to buffer before flushing, stops the client from large enough packages</span>\n      <span class=\"token comment\"># to block its responsiveness</span>\n      <span class=\"token key atrule\">maxBufferByteSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100000</span>\n\n      <span class=\"token comment\"># Security</span>\n      <span class=\"token comment\"># amount of time a connection can remain open while not being logged in</span>\n      <span class=\"token key atrule\">unauthenticatedClientTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180000</span>\n      <span class=\"token comment\"># invalid login attempts before the connection is cut</span>\n      <span class=\"token key atrule\">maxAuthAttempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token comment\"># maximum allowed size of an individual message in bytes</span>\n      <span class=\"token key atrule\">maxMessageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1048576</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ws<span class=\"token punctuation\">-</span>json\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># url path websocket connections connect to</span>\n      <span class=\"token key atrule\">urlPath</span><span class=\"token punctuation\">:</span> /deepstream<span class=\"token punctuation\">-</span>json\n      <span class=\"token comment\"># the amount of milliseconds between each ping/heartbeat message</span>\n      <span class=\"token key atrule\">heartbeatInterval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30000</span>\n      <span class=\"token comment\"># the amount of milliseconds that writes to sockets are buffered</span>\n      <span class=\"token key atrule\">outgoingBufferTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token comment\"># the maximum amount of bytes to buffer before flushing, stops the client from large enough packages</span>\n      <span class=\"token comment\"># to block its responsiveness</span>\n      <span class=\"token key atrule\">maxBufferByteSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100000</span>\n\n      <span class=\"token comment\"># Security</span>\n      <span class=\"token comment\"># amount of time a connection can remain open while not being logged in</span>\n      <span class=\"token key atrule\">unauthenticatedClientTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">180000</span>\n      <span class=\"token comment\"># invalid login attempts before the connection is cut</span>\n      <span class=\"token key atrule\">maxAuthAttempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token comment\"># maximum allowed size of an individual message in bytes</span>\n      <span class=\"token key atrule\">maxMessageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1048576</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># allow 'authData' parameter in POST requests, if disabled only token and OPEN auth is</span>\n      <span class=\"token comment\"># possible</span>\n      <span class=\"token key atrule\">allowAuthData</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token comment\"># enable the authentication endpoint for requesting tokens/userData.</span>\n      <span class=\"token comment\"># note: a custom authentication handler is required for token generation</span>\n      <span class=\"token key atrule\">enableAuthEndpoint</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token comment\"># path for authentication requests</span>\n      <span class=\"token key atrule\">authPath</span><span class=\"token punctuation\">:</span> /api/auth\n      <span class=\"token comment\"># path for POST requests</span>\n      <span class=\"token key atrule\">postPath</span><span class=\"token punctuation\">:</span> /api\n      <span class=\"token comment\"># path for GET requests</span>\n      <span class=\"token key atrule\">getPath</span><span class=\"token punctuation\">:</span> /api\n      <span class=\"token comment\"># maximum allowed size of an individual message in bytes</span>\n      <span class=\"token key atrule\">maxMessageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> mqtt\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># port for the mqtt server</span>\n        <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1883</span>\n        <span class=\"token comment\"># host for the mqtt server</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 0.0.0.0\n        <span class=\"token comment\"># timeout for idle devices</span>\n        <span class=\"token key atrule\">idleTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60000</span></code></pre></div>\n<h3 id=\"authentication-api-now-supports-multiple-authentication-mechanisms\"><a href=\"#authentication-api-now-supports-multiple-authentication-mechanisms\" aria-label=\"authentication api now supports multiple authentication mechanisms permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication API now supports multiple authentication mechanisms</h3>\n<p>Our auth API now uses an array of authentication endpoints instead of a single one.</p>\n<p>The following example is a user failing to authenticate (due to not being found on the system) and\ninstead of failing getting an anonymous session (with limited data).</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">auth</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> file\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./users.yml\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> none</code></pre></div>\n<p>For those developing/maintaining an auth endpoint please refer to the <a href=\"/tutorials/custom-plugins/authentication/\">updated guide</a></p>\n<h3 id=\"permission-api-argument-list-has-been-shortened\"><a href=\"#permission-api-argument-list-has-been-shortened\" aria-label=\"permission api argument list has been shortened permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Permission API argument list has been shortened</h3>\n<p>The permission plugin API has been shortened since the name and data are all present on socketWrapper and easily found using typescript. Bonus is we now also can permission against clientData.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">public</span> <span class=\"token function\">canPerformAction</span><span class=\"token punctuation\">(</span>socketWrapper<span class=\"token punctuation\">:</span> SocketWrapper<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> PermissionCallback<span class=\"token punctuation\">,</span> passItOn<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> clientData<span class=\"token punctuation\">,</span> serverData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> socketWrapper\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Upgrading the server","description":"Upgrading the deepstream server to V5","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/upgrade-guides/v5/server/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/99-upgrade-guides/v5/10-server/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/upgrade-guides/v5/server/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}