{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/integrations/mobile/ionic2/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p><a href=\"http://ionicframework.com/\">Ionic</a> is a UI  framework for building mobile apps built on top of Angular and can interact with native APIs via Cordova. Ionic is incompatible with the new Angular version; this is why Ionic 2 was released to play nice with Angular 2x.</p>\n<p><img src=\"http://imgur.com/eHry6PK.png\"></p>\n<p><a href=\"https://deepstream.io/\">deepstream</a> is the future of real-time web. It’s an overwhelmingly fast, real-time server that is open source and standalone. This means you can install deepstream on your local machine; then, start building your awesome apps with its backing.</p>\n<p><img src=\"http://imgur.com/ezluEAa.png\"></p>\n<p>This article will walk you through building a real-time chat mobile app using the Ionic 2 and deepstream as shown in the following image:</p>\n<p><img src=\"http://imgur.com/0sphh7d.gif\"></p>\n<h2 id=\"prerequisites\"><a href=\"#prerequisites\" aria-label=\"prerequisites permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisites</h2>\n<p>Installation goes two ways, but a very simple process; we need to install both deepstream server and Ionic CLI tool for scaffolding Ionic projects.</p>\n<p>deepstream server comes in different forms and shapes; it can be downloaded and executed as a shell command on your OS (OSX, Windows, Linux), or installed using Docker or npm. We will go the OS route in this tutorial:</p>\n<ul>\n<li>Download deepstream from the <a href=\"https://deepstream.io/install/\">install page</a>.</li>\n<li>Extract the content of the zipped file to your project directory.</li>\n<li>Run the following command on the unzipped directory to start deepstream:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Start deepstream</span>\n./deepstream</code></pre></div>\n<p><img src=\"http://imgur.com/gwaRWk4.jpg\"></p>\n<p>Awesome! We have a running server, now let’s create an Ionic project.</p>\n<p>The Ionic CLI tool is used to scaffold new projects and must be installed using npm:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g ionic</code></pre></div>\n<p>That adds a new command to your PATH so you could run Ionic-specific commands from anywhere on you PC.</p>\n<p>Now, you could create a new project using the ionic <code class=\"language-text\">start</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ionic start chatMe blank --v2</code></pre></div>\n<ul>\n<li><code class=\"language-text\">chatMe</code> is the name of the app we intend to create and this will serve as the folder name as well.</li>\n<li><code class=\"language-text\">blank</code> is the type of template we want to start with. Ionic offers <a href=\"http://ionicframework.com/docs/v2/setup/tutorial/\">various templates</a> you can pick from if <code class=\"language-text\">blank</code> seems boring to you.</li>\n<li><code class=\"language-text\">--v2</code> flag indicates that the project should be created with Ionic 2, not 1.</li>\n</ul>\n<p>Run the created project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># cd into directory</span>\n<span class=\"token builtin class-name\">cd</span> chatMe\n<span class=\"token comment\"># run app</span>\nionic serve --lab</code></pre></div>\n<blockquote>\n<p>Basic knowledge of Angular 2x is required to understand the examples shown in this post. You can get started with <a href=\"https://angular.io/docs/ts/latest/tutorial/\">Tours of Heroes</a></p>\n</blockquote>\n<h2 id=\"deepstreams-records-and-lists\"><a href=\"#deepstreams-records-and-lists\" aria-label=\"deepstreams records and lists permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>deepstream’s Records and Lists</h2>\n<p>deepstream at its core have two prominent members:</p>\n<ol>\n<li>Records</li>\n<li>Lists</li>\n</ol>\n<p>Records are the building blocks and essential feature of deepstream. They are used to persist data and deliver data just like every other storage records with the added real-time capabilities. deepstream records expose three primary methods that you would be interested in:</p>\n<ul>\n<li><code class=\"language-text\">set()</code>: Updates record value.</li>\n<li><code class=\"language-text\">get()</code>: Creates a new record or retrieves the value of an existing record.</li>\n<li><code class=\"language-text\">subscribe()</code>: Used to listen to real-time changes and updates connected clients when changes occur</li>\n</ul>\n<p>Lists, on the other hand, are, as the name goes, a collection. deepstream list gives you the power to handle a group of records as if they were a collection. You can iterate them, sort, or even page the values (records) of a list. Lists have the important methods like <code class=\"language-text\">addEntry()</code>, <code class=\"language-text\">getEntry()</code>, <code class=\"language-text\">setEntries()</code>, <code class=\"language-text\">subscribe()</code>, and more for performing updates and listening to changes on the collection.</p>\n<h2 id=\"setup-deepstream-with-a-service\"><a href=\"#setup-deepstream-with-a-service\" aria-label=\"setup deepstream with a service permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup deepstream with a Service</h2>\n<p>Interacting with the deepstream server that we set up earlier requires a deepstream client. deepstream have SDKs for various possible clients, but in our case, we will make use of that of JavaScript. To install the SDK, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @deepstream/client</code></pre></div>\n<p>Services serve as excellent abstractions of data layer as well as separation of concern. deepstream provides real-time data. Therefore, it would be a good idea to abstract few of it’s functionalities to a service class:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ./src/shared/ds.service.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Import deepstream</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> deepstream <span class=\"token keyword\">from</span> <span class=\"token string\">'@deepstream/client'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DsService</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> ds<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> dsInstance<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Setup deepstream and listen for errors</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dsInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">credentials<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> loginHandler<span class=\"token operator\">?</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Authenticate</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> loginHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create or retrieve record</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create or retrieve list</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">constructor</code> function sets up deepstream and listens for error events.</li>\n<li>The <code class=\"language-text\">login</code> method authenticates the deepstream client using deepstream’s <code class=\"language-text\">login</code> function.</li>\n<li><code class=\"language-text\">getRecord</code>: deepstream’s power lies on records — they are what I like to call <em>live</em> records because of their ability to persist and provide entities, real-time.</li>\n<li><code class=\"language-text\">getList</code> allows you to treat a group of records like a collection.</li>\n</ul>\n<h2 id=\"authenticate-client\"><a href=\"#authenticate-client\" aria-label=\"authenticate client permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authenticate Client</h2>\n<p>Client authentication is achieved by sending authentication payload to the deepstream server. This payload can be forwarded to an HTTP server to validate credentials. This example does not require any payload or credential validation. However, deepstream still requires that the login method is called to open a connection. The login method can be called without credentials if none exists:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ./src/pages/home/home.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NavController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ionic-angular'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Import deepstream sevice</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../shared/ds.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'page-home'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'home.html'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">public</span> navCtrl<span class=\"token punctuation\">:</span> NavController<span class=\"token punctuation\">,</span>\n    \n    <span class=\"token comment\">/*\n    * Inject the deepstream service\n    */</span>\n    <span class=\"token keyword\">private</span> ds<span class=\"token punctuation\">:</span> DsService\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Call the login method</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">loginHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">success<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Login handler</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'logged in'</span><span class=\"token punctuation\">,</span> success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, we inject the deepstream service created earlier, then use it’s exposed <code class=\"language-text\">login</code> method to authenticate the client.</p>\n<h2 id=\"creating-chat-messages\"><a href=\"#creating-chat-messages\" aria-label=\"creating chat messages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Chat Messages</h2>\n<p>A deepstream record will store each of the chat messages. We need to collect these messages using Ionic’s textarea field, bind the field to the component class property and use a method to send the value coming in, to deepstream:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- ./src/pages/home/home.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-header</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-navbar</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-title</span><span class=\"token punctuation\">></span></span>\n      {{username}}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-navbar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-header</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-content</span> <span class=\"token attr-name\">padding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-list</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-item</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-label</span> <span class=\"token attr-name\">floating</span><span class=\"token punctuation\">></span></span>Message<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-label</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-textarea</span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-textarea</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-list</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">padding</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">ion-button</span> <span class=\"token attr-name\">block</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>addChat()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Send<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-content</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">ion-navbar</code> is the app bar as seen in the view’s header. A username property is bound to it so as to show the user her name when she joins the chat. </p>\n<p><code class=\"language-text\">ion-textarea</code> is an input field for entering chat messages. It is bound to the <code class=\"language-text\">text</code> property which we will create soon. The button, <code class=\"language-text\">ion-button</code> is bound to the <code class=\"language-text\">addChat</code> click handler.</p>\n<p>Our new bindings can be reflected in the component class as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Properties</span>\n    username<span class=\"token punctuation\">;</span>\n    text<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get username from prompt</span>\n        <span class=\"token keyword\">const</span> defaultUsername <span class=\"token operator\">=</span> <span class=\"token string\">'anonymous'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please enter your username'</span><span class=\"token punctuation\">,</span> defaultUsername<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username <span class=\"token operator\">||</span> defaultUsername<span class=\"token punctuation\">;</span>\n    \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addChat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Create record name with UUID</span>\n        <span class=\"token keyword\">const</span> recordName <span class=\"token operator\">=</span> <span class=\"token string\">'chat/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>dsInstance<span class=\"token punctuation\">.</span><span class=\"token function\">getUid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Get or create record</span>\n        <span class=\"token keyword\">const</span> chatRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Update record with chat message and username</span>\n        chatRecord<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Clear textarea</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/*\n        *\n        * Update chats list which is\n        * yet to be created\n        */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chats<span class=\"token punctuation\">.</span><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The most significant addition is the <code class=\"language-text\">addChat</code> method; it creates a new record using a unique record name generated by a UUID. deepstream’s client exposes this method on its API for convenient so you can access it from a deepstream instance using the <code class=\"language-text\">getUid</code> method.</p>\n<p>Further, into the logic, we use the record’s <code class=\"language-text\">set</code> method to update the newly created record, with an object containing the chat message, as well as the username.</p>\n<p>Finally, we would want to shove the new chat record into a list, <code class=\"language-text\">chats</code>, which can be displayed later. Let’s create this <code class=\"language-text\">chats</code> list.</p>\n<h2 id=\"listing-chat-messages\"><a href=\"#listing-chat-messages\" aria-label=\"listing chat messages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listing Chat Messages</h2>\n<p>With deepstream list, we can group chats’ records as a collection, iterate over the list and display them on the view. Creating a new chat already attempts to add the chat to a list which does not exist. We will pick up from there.</p>\n<p>First, create a property to hold the list, then use record’s <code class=\"language-text\">getList()</code> method to create the record, and finally subscribe to this to update the data bound to the view:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// . . .</span>\n  chats<span class=\"token punctuation\">;</span>\n  chatArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// . . .</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// . . .</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chats <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chats'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chats<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entry-added'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">recordName</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span> recordName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">record</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        record<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>username <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chatArray<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// . . .</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The subscription is done with the <code class=\"language-text\">ngOnInit</code> lifecycle which we called when Angular loads the component. The method sets the <code class=\"language-text\">chats</code> property to the list created via deepstream.</p>\n<p>Next, we listen to <code class=\"language-text\">entry-added</code> for the chat which is called when new values are pushed to the list, in our case, with the <code class=\"language-text\">addEntry()</code> method. A record name is passed to the <code class=\"language-text\">entry-added</code> event handler, so you can subscribe to the record, and push its values to a view bound array, <code class=\"language-text\">chatArray</code> when the record is ready.</p>\n<p>Update the template to iterate over <code class=\"language-text\">chatArray</code> and display the chats:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- . . . --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-content</span> <span class=\"token attr-name\">padding</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- . . . --></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-list</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ion-item</span> <span class=\"token attr-name\">*ngFor</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let chat of chatArray<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>{{chat.username}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>{{chat.text}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-list</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ion-content</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"http://imgur.com/0sphh7d.gif\"></p>","frontmatter":{"title":"Ionic","description":"Learn how to use Ionic with deepstream","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/integrations/mobile/ionic2/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/50-integrations/20-mobile/20-ionic2/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/integrations/mobile/ionic2/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}