{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/example-apps/realtime-friend-locator/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<h1 style=\"border: 1px solid black; padding: 10px; border-radius: 2px; font-size: 25px; margin-top: 20px;\">\n    Help needed to update and migrate to \n    <a style=\"font-size: 25px; color: #0FBBEC;\" href=\"/guides\">Guides Section</a>\n</h1>\n<p><img src=\"/locator-a92ae1d23b2f73e3d840c13e2d47d9d6.gif\" alt=\"Locate Your Friends\"></p>\n<p>One of the exciting things about deepstream is that it allows you to get geospatial updates in realtime. In this tutorial, we are going to make an app that shows the location of all members, who are logged in, who are within a one kilometer radius. We will be using RethinkDB in combination with deepstream to do our geospatial queries, and google maps to display our results.</p>\n<h2 id=\"connecting-deepstream-with-rethinkdb\"><a href=\"#connecting-deepstream-with-rethinkdb\" aria-label=\"connecting deepstream with rethinkdb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting deepstream with Rethinkdb</h2>\n<p>Deepstream.io already has a great tutorial up about using RethinkDB with deepstream. You can find out more on how to <a href=\"/tutorials/plugins/database/rethinkdb/\">integrate RethinkDB with deepstream</a> here. RethinkDB will store all the actual data when deepstream creates records, and deepstream will only pull the data from RethinkDB once it subscribes to that particular record.</p>\n<p>Another great reason for using RethinkDB for this project, is for its ability to do geospatial queries. Instead of having to access each record we create through deepstream, RethinkDB can first do a geospatial query with the coordinates that are stored, then deepstream can subscribe to a list of results that are populated by the query, and finally subscribe only to those records that we want from the database query. This will result in faster load times, since we won’t have to subscribe and unsubscribe to every record that exists. Instead we’ll only subscribe to the records we want.</p>\n<h2 id=\"creating-a-map-with-google-maps\"><a href=\"#creating-a-map-with-google-maps\" aria-label=\"creating a map with google maps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a map with Google maps</h2>\n<p>To create a map using Google Maps API, you first need to get an <a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\">API key</a>, and follow the directions on how to included it in your HTML.</p>\n<h2 id=\"setting-deepstream-up-with-react\"><a href=\"#setting-deepstream-up-with-react\" aria-label=\"setting deepstream up with react permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting deepstream up with React</h2>\n<p>Setting up deepstream in React is actually quite simple. Once you download and install deepstream, connecting to the deepstream server looks like:</p>\n<h4 id=\"in-your-constructor-connect-to-deepstream\"><a href=\"#in-your-constructor-connect-to-deepstream\" aria-label=\"in your constructor connect to deepstream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In your constructor connect to deepstream:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// handle error here, in case of error</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onError</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>to keep things simple for this tutorial, we will skip password authentication, and just use the user’s username to log into the deepstream server.</p>\n<h4 id=\"to-handle-login-once-a-user-has-submitted-their-name\"><a href=\"#to-handle-login-once-a-user-has-submitted-their-name\" aria-label=\"to handle login once a user has submitted their name permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>To handle login, once a user has submitted their name:</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">login</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">username<span class=\"token punctuation\">,</span> callback</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">:</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onLoginResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_onLoginResult</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">success</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> success <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// here we create the record if it doesn't exist, or get the record if it</span>\n    <span class=\"token comment\">//exists.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'user/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// the whenReady() method, ensures the record is fully loaded before</span>\n    <span class=\"token comment\">// continuing, and takes a callback.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onRecordCheckComplete</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_onRecordCheckComplete</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">record</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the set() method allows us to now set data.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"getting-coordinates-and-subscribing-to-a-list\"><a href=\"#getting-coordinates-and-subscribing-to-a-list\" aria-label=\"getting coordinates and subscribing to a list permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting coordinates, and subscribing to a list</h2>\n<p>Now that a user is logged in, we need to get their latitudinal and longitudinal coordinates. HTML5 makes this easy with its <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator\">navigator object</a> that we can query for coordinates. Once we have their coordinates, we can listen to the user’s position updates with the <em>watchPosition</em> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">watchPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This method gets called every time the logged in user’s position changes. So we will want to pass to it a callback that will update the user’s coordinates, and do a geospatial query upon position change. This will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span>geolocation<span class=\"token punctuation\">.</span><span class=\"token function\">watchPosition</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPositionUpdate</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">onPositionUpdate</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">position</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        lat<span class=\"token punctuation\">:</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">,</span>\n        lng<span class=\"token punctuation\">:</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>longitude\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//sets the position of this record to the current latitude and longitude</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this function, we will also want to create a list that contains the user’s current latitude and longitude. This list is what we will listen to on the backend to run our database queries:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">onPositionUpdate</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">position</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        lat<span class=\"token punctuation\">:</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">,</span>\n        lng<span class=\"token punctuation\">:</span> position<span class=\"token punctuation\">.</span>coords<span class=\"token punctuation\">.</span>longitude\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//creates the list that contains our latitude and longitude</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users_within_radius/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>lat <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">.</span>lng <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onGetEntries</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//setCenter is a method called to find the center for the map,</span>\n    <span class=\"token comment\">//that was created with google maps api</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"listening-for-subscribed-users\"><a href=\"#listening-for-subscribed-users\" aria-label=\"listening for subscribed users permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listening for subscribed users</h2>\n<p>Now we are ready to find all the users who are within a kilometer radius of us, and who are logged in to the app. We will be using the listen method to pull our data out of this list we created, that contains our latitude and longitude.</p>\n<p>The listen method is called every time there is a change in record subscriptions. Once there are events to subscribe to and we accept the response, we can start publishing data that will be populated from our database. There is more information about this in the  <a href=\"/tutorials/core/active-data-providers/\">events turorial</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//server side</span>\n<span class=\"token keyword\">const</span> GeoSubscription <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'./geo-subscription'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DeepstreamClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@deepstream/client'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ds <span class=\"token operator\">=</span> <span class=\"token function\">deepstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:6020'</span><span class=\"token punctuation\">)</span>\nds<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nds<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> geoSubscriptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//here we listen to the list we created upon logging in.</span>\n<span class=\"token comment\">//the match will contain all the information in our list after the \"/.*\" . We our sending the match to the geoSubscription module, where we will extract its data and perform a RethinkDB query.</span>\n\nds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users_within_radius/.*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//start publishing data</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>geoSubscriptions<span class=\"token punctuation\">[</span> match <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        geoSubscriptions<span class=\"token punctuation\">[</span> match <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GeoSubscription</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">,</span> ds <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//stop publishing data</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> geoSubscriptions<span class=\"token punctuation\">[</span> match <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            geoSubscriptions<span class=\"token punctuation\">[</span> match <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> geoSubscriptions<span class=\"token punctuation\">[</span> match <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"performing-a-rethinkdb-geospatial-query\"><a href=\"#performing-a-rethinkdb-geospatial-query\" aria-label=\"performing a rethinkdb geospatial query permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performing a RethinkDB geospatial query</h2>\n<p>In our <em>GeoSubscription</em> class, we now can run a geospatial query with the longitude and latitude, that we passed from our list, against the position of all other users that are also logged in. Here is where we filter out the users who are out of our range (1 kilometer radius) before ever having to subscribe to their records.</p>\n<p>First, in your constructor, access the list that was passed into the match:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span> match <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_queryDb</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now that we are connected to the correct list, we can perform a database query with this match.\nhere is a link to the <a href=\"https://www.rethinkdb.com/api/javascript/\">RethinkDB api</a> which will be very helpful.</p>\n<p>In order to perform geospatial queries in RethinkDB, we need to convert the longitude and latitude into an object point (<em>r.point()</em>). It would be wonderful to convert latitude and longitude into these points upon directly receiving them, but deepstream can’t store database specific structures.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">_queryDb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// *match* is returned as a string, and needs to be broken into an array, and extracted as follows</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">db</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">user</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//performs a geospatial query based on two object points in RethinkDB</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lng'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//users who are logged in</span>\n            r<span class=\"token punctuation\">.</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span> lng<span class=\"token punctuation\">,</span> lat <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//this user's coordinates from the match</span>\n            <span class=\"token punctuation\">{</span>unit<span class=\"token punctuation\">:</span> <span class=\"token string\">'km'</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span> radius <span class=\"token punctuation\">)</span> <span class=\"token comment\">// only populates users who are within the radius provided</span>\n        <span class=\"token comment\">//here, .changes() allows us to subscribe to position locations of users returned in the query</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ds_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">changes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>includeInitial<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onDbResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this callback passes the names of all the users that are logged in, and within the radius of the query.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_onDbResult</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">err<span class=\"token punctuation\">,</span> cursor</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateList</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_updateList</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">err<span class=\"token punctuation\">,</span> result</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>new_val <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>new_val <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//adds the users within the radius to a new list</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>new_val <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">removeEntry</span><span class=\"token punctuation\">(</span> result<span class=\"token punctuation\">.</span>old_val <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"subscribe-to-the-user-records\"><a href=\"#subscribe-to-the-user-records\" aria-label=\"subscribe to the user records permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribe to the user records</h2>\n<p>Now back to the client-side code. Recall that we subscribed to our list in our <em>onPositionUpdate</em> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onGetEntries</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As the list of users is updated from our database query, we can now loop through the results and start putting markers on our map:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">_onGetEntries</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">users</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> recordNames <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateMarkers</span><span class=\"token punctuation\">(</span> recordNames <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_updateMarkers</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">userRecordNames</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> userRecordNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>markers<span class=\"token punctuation\">[</span> userRecordNames<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//for each list entry, we create a new marker instance,</span>\n            <span class=\"token comment\">//where we can subscribe to the record corresponding with the list entry</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>markers<span class=\"token punctuation\">[</span> userRecordNames<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Marker</span><span class=\"token punctuation\">(</span> userRecordNames<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">let</span> userRecordName <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>markers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> userRecordNames<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span> userRecordName <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>markers<span class=\"token punctuation\">[</span> userRecordName <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>markers<span class=\"token punctuation\">[</span> userRecordName <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the Marker class, we can now subscribe to each user’s record who is within our radius, get their coordinates, and place a marker at their location. If a user logs off or walks out of range, the list will be updated, and the record will be unsubscribed to.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//subscribe to each record of a user within radius</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record <span class=\"token operator\">=</span> dsService<span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'user/'</span> <span class=\"token operator\">+</span> recordName <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'position'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_updateMarkerPosition</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, fill your map with Markers using Google Maps API!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//make sure to call the setMap(null) function on the marker you are destroying, or it will remain on the map</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marker<span class=\"token punctuation\">.</span><span class=\"token function\">setMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marker <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_updateMarkerPosition</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">position</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>position <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marker <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_addMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marker<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>LatLng</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'position.lat'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'position.lng'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">_addMarker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Marker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        position<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        map<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'username'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"where-to-go-next\"><a href=\"#where-to-go-next\" aria-label=\"where to go next permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where to go next</h2>\n<p>Now that we’ve outlined how to make a simple app that shares user’s locations with others, there are many ways to expand upon this and develop it into a useful application. For starters, it would be good to implement some sort of <a href=\"/docs/server/user-file/\">user authentication</a>. You could also perform more complex geolocation queries based on user input. For example, maybe users can choose the radius that the database queries, or you could map out walking directions to a selected user. With the real-time geo-location structure in place, there are myriads of directions to now take this application.</p>","frontmatter":{"title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/example-apps/realtime-friend-locator/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/75-example-apps/realtime-friend-locator/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/example-apps/realtime-friend-locator/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}