{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/example-apps/realtime-flight-tracker/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<h1 style=\"border: 1px solid black; padding: 10px; border-radius: 2px; font-size: 25px; margin-top: 20px;\">\n    Help needed to update and migrate to \n    <a style=\"font-size: 25px; color: #0FBBEC;\" href=\"/guides\">Guides Section</a>\n</h1>\n<p>This tutorial will take you through building a realtime flight tracking system with deepstream. We’ll be building both a backend provider process that updates the records with the location of flights, and a web based front end that allows us to visualise these. If you’d like to dive straight into the code you can take a look at the GitHub <a href=\"https://github.com/deepstreamIO/dsh-demo-realtime-flight-tracker\">repository</a>.</p>\n<h2 id=\"realtime-updates-via-provider\"><a href=\"#realtime-updates-via-provider\" aria-label=\"realtime updates via provider permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Realtime updates via provider</h2>\n<p>To provide these updates, we’ll be polling an endpoint for the location of flights. Since the flights aren’t necessarily updated every second, we’ll be naively interpolating the data points to create a smoother experience for the end user.</p>\n<p>The first thing we’ll do is create our backend process that provides the realtime updates to our clients. The only dependencies we’ll have for this provider will be the <a href=\"https://github.com/deepstreamIO/deepstream.io-client-js\">deepstream Javascript client</a> and <a href=\"https://github.com/tomas/needle\">needle</a>, a nice wrapper for making HTTP requests.</p>\n<p>We can get a reference to our client as follows, and then get our deepstream <code class=\"language-text\">List</code> of flights, this is the list of flights that clients will be referring to.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  flightList <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flights'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once we’ve logged in, we need to start polling our endpoint for flight data, we’ve put this into a function called <code class=\"language-text\">fetchFlightData</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchFlightData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  needle<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'https://data-live.flightradar24.com/zones/fcgi/feed.js?bounds=52.74,52.19,12.91,13.74'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// some keys contain metadata about the request, we're only concerned about</span>\n      <span class=\"token comment\">// ones that contain an Array of flight data</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>flightId<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>From here it gets a bit tricky, since not all flights are updated every second, or even every five seconds, we need to have a buffer where we store interpolated data points. We have a function called <code class=\"language-text\">addToBuffer</code> that does this, and it’s a bit dense, so let’s break it down.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> flights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addToBuffer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">flightId<span class=\"token punctuation\">,</span> lat<span class=\"token punctuation\">,</span> lng</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> flightName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">flights/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>flightId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">let</span> flight <span class=\"token operator\">=</span> flights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>flightName<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    flight <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    flight<span class=\"token punctuation\">.</span>record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>flightName<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// check if \"flights\" contains \"flights/1234\"</span>\n    <span class=\"token comment\">// if not, add it</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flightList<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>flightName<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      flightList<span class=\"token punctuation\">.</span><span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>flightName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    flight<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> lat<span class=\"token punctuation\">,</span> lng <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    flight<span class=\"token punctuation\">.</span>lastLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> lat<span class=\"token punctuation\">,</span> lng <span class=\"token punctuation\">}</span>\n    flights<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>flightName<span class=\"token punctuation\">,</span> flight<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This part is quite straight forward, because we have a list called <code class=\"language-text\">flights</code>, all our Record names will be prefixed by <code class=\"language-text\">flights/</code>. We have a Map that is going to store various bits of data about the flight, such as the last location and buffer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span>lastLocation<span class=\"token punctuation\">.</span>lat <span class=\"token operator\">==</span> lat <span class=\"token operator\">&amp;&amp;</span> flight<span class=\"token punctuation\">.</span>lastLocation<span class=\"token punctuation\">.</span>lng <span class=\"token operator\">==</span> lng <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span></code></pre></div>\n<p>Here we’re saying that if the location of the flight retrieved from our HTTP request is the same as it was before, don’t do anything.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> newLat <span class=\"token operator\">=</span> lat <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span>lastLocation<span class=\"token punctuation\">.</span>lat <span class=\"token operator\">-</span> lat<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i\n      <span class=\"token keyword\">const</span> newLng <span class=\"token operator\">=</span> lng <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>flight<span class=\"token punctuation\">.</span>lastLocation<span class=\"token punctuation\">.</span>lng <span class=\"token operator\">-</span> lng<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i\n      flight<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lat<span class=\"token punctuation\">:</span> newLat<span class=\"token punctuation\">,</span> lng<span class=\"token punctuation\">:</span> newLng <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    flight<span class=\"token punctuation\">.</span>lastLocation <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> lat<span class=\"token punctuation\">,</span> lng <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we have the interpolation step. Here we’re creating 50 datapoints between the last known location, and the new one. We then push these into a buffer - we’ll get to the buffer in a bit.</p>\n<p>Now that we have this buffer, it’s a simple matter of setting the Record at an interval with these coordinates. We use the <code class=\"language-text\">Array.shift()</code> function to remove the first entry from the buffer. This way we’re always updating the flights location in the correct direction.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateLocations</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>flightName<span class=\"token punctuation\">,</span> flightData<span class=\"token punctuation\">]</span>  <span class=\"token keyword\">of</span> flights<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// flight is stationary</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flightData<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span>\n    flightData<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n      flightData<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now back at the start of our script we can put the following lines. This starts the fetching of flight data at an interval, and starts updating the Records in our flight list with the location of flights.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>fetchFlightData<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fetchFlightData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>updateLocations<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"web-front-end\"><a href=\"#web-front-end\" aria-label=\"web front end permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web front end</h2>\n<p>Now that we have our backend process providing these location updates, we need a web interface to display these on. We’ll be using the google maps API to display markers, and the deepstream Records to update the coordinates of these.</p>\n<p>The first thing we need to do is initialise this map and our deepstream client. We can then get our list of flights and render it. We’ve left out the code for initialising the map, however if you’re interested you can look at it in the GitHub repo.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flights'</span><span class=\"token punctuation\">)</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span>renderList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inside of our <code class=\"language-text\">renderList</code> function, we’re just adding listeners to list events, as well as calling our <code class=\"language-text\">addFlightTracking</code> function on each entry.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">renderList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>addFlightTracking<span class=\"token punctuation\">)</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entry-added'</span><span class=\"token punctuation\">,</span> addFlightTracking<span class=\"token punctuation\">)</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entry-removed'</span><span class=\"token punctuation\">,</span> removeFlightTracking<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The real work of our front end is inside this <code class=\"language-text\">addFlightTracking</code> function. We create a marker and set the coordinates of it to whatever our Record data is. Our provider process will be sending objects in the form <code class=\"language-text\">{ lat: xxx, lng: yyy }</code>. We then also subscribe to any future changes, updating the markers location in the event of these.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addFlightTracking</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flightId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>flightId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> marker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Marker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  record<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">record</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    marker<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  record<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    marker<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  markers<span class=\"token punctuation\">[</span>flightId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> marker\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After all this, we should have an application that looks as follows:</p>\n<p><img src=\"/flights-cdbe2a705e83d3bec2f948d696270454.gif\" alt=\"flights\"></p>","frontmatter":{"title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/75-example-apps/realtime-flight-tracker/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/example-apps/realtime-flight-tracker/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}