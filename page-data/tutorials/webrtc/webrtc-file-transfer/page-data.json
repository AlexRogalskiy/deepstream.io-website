{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/webrtc/webrtc-file-transfer/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>WebRTC makes it possible to transfer any file between two browsers using <a href=\"/tutorials/webrtc//webrtc-datachannels/\">data-channels</a> and binary data.</p>\n<h2 id=\"how-does-binary-data-work-in-browsers\"><a href=\"#how-does-binary-data-work-in-browsers\" aria-label=\"how does binary data work in browsers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does binary data work in browsers</h2>\n<p>The current generation of browsers allow you to send arrays of bytes - groups of eight zeros or ones that can specify numbers between 0 and 255. To work with these, they provide a number of concepts - <code class=\"language-text\">Uint8Array</code>s  to store them in, <code class=\"language-text\">FileReader</code>s to create them and <code class=\"language-text\">Blob</code>s to assemble them. Transports like Websockets and WebRTC allow for the transmission of raw byte streams.</p>\n<h2 id=\"why-is-that-important\"><a href=\"#why-is-that-important\" aria-label=\"why is that important permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why is that important</h2>\n<p>Transferring files between two browsers means working directly with binary data. There is no <code class=\"language-text\">sendFile()</code> or <code class=\"language-text\">onFileReceived</code> API - instead its up to the developer to get the file from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\">file input</a>, via <a href=\"https://www.html5rocks.com/en/tutorials/casestudies/box_dnd_download/\">drag and drop</a> or - if you’re building a chrome app with elevated permissions - from the <a href=\"https://developer.chrome.com/apps/fileSystem\">file system API</a>, read it using a <a href=\"https://developer.mozilla.org/en/docs/Web/API/FileReader\">FileReader</a>, transmit it in chunks, reassemble it on the other side and finally trick the browser into downloading it.</p>\n<h2 id=\"establishing-a-manipulated-p2p-connection\"><a href=\"#establishing-a-manipulated-p2p-connection\" aria-label=\"establishing a manipulated p2p connection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Establishing a manipulated P2P Connection</h2>\n<p>For this tutorial we assume you already know how to establish a connection between two peers as described in <a href=\"/tutorials/webrtc//webrtc-datachannels/\">the first tutorial</a>. There is one extra bit we have to do though: By default Chrome caps the transfer rate for WebRTC datachannels to 30 kbps - at this speed downloading GTA 5 on Steam would take a solid 25 days nonstop.</p>\n<p>Fortunately, the offer <a href=\"https://andrewjprokop.wordpress.com/2013/09/30/understanding-session-description-protocol-sdp/\">sdp</a> is just a string - which means we can fiddle with it before sending. This can be done by adding this line to our outgoing signal callback:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">signal<span class=\"token punctuation\">.</span>sdp <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">.</span>sdp<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'b=AS:30'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b=AS:1638400'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"getting-a-file\"><a href=\"#getting-a-file\" aria-label=\"getting a file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting a file</h2>\n<p>We’ll use a simple file input that lets users pick one file a time:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>my-file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>As soon as the user selects a file, it will be available as an entry in the input’s <a href=\"https://developer.mozilla.org/en/docs/Web/API/FileList\">FileList</a> and can be retrieved via</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> fileInput<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Each <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\">file object</a> has a <code class=\"language-text\">name</code> , <code class=\"language-text\">size</code> and <code class=\"language-text\">type</code> property and allows us to access its data via <code class=\"language-text\">.slice(start, end)</code> which returns a <code class=\"language-text\">Blob</code>.</p>\n<h2 id=\"reading-and-sending-a-file\"><a href=\"#reading-and-sending-a-file\" aria-label=\"reading and sending a file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reading and sending a file</h2>\n<p>We can’t do much with Blobs - what we need is an ArrayBuffer. We can get one by using a <a href=\"https://developer.mozilla.org/en/docs/Web/API/FileReader\">FileReader</a> - a helpful utility that allows us to read our file in multiple chunks and start sending data whilst still reading it.</p>\n<p>We need to be careful about the size of our chunks - there’s a <a href=\"http://viblast.com/blog/2015/2/5/webrtc-data-channel-message-size/\">certain mystery</a> about the exact possible maximum, but 1200 bytes per chunk seems to be a solid upper limit.</p>\n<p>Combining all these requirements gives us the following code for reading and sending files:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">BYTES_PER_CHUNK</span> <span class=\"token operator\">=</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> file<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> currentChunk<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fileInput <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'input[type=file]'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">readNextChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token constant\">BYTES_PER_CHUNK</span> <span class=\"token operator\">*</span> currentChunk<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> end <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> <span class=\"token constant\">BYTES_PER_CHUNK</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span> start<span class=\"token punctuation\">,</span> end <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfileReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    p2pConnection<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span> fileReader<span class=\"token punctuation\">.</span>result <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentChunk<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">BYTES_PER_CHUNK</span> <span class=\"token operator\">*</span> currentChunk <span class=\"token operator\">&lt;</span> file<span class=\"token punctuation\">.</span>size <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">readNextChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfileInput<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    file <span class=\"token operator\">=</span> fileInput<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    currentChunk <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// send some metadata about our file</span>\n    <span class=\"token comment\">// to the receiver</span>\n    p2pConnection<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        fileName<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        fileSize<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">.</span>size\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">readNextChunk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"receiving-and-reassembling-a-file\"><a href=\"#receiving-and-reassembling-a-file\" aria-label=\"receiving and reassembling a file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Receiving and reassembling a file</h2>\n<p>As a receiver our connection now spits out a combination of somewhat unrelated text and binary messages. It’s our responsibility to reassemble them into a file again.</p>\n<p>To do this we first need to know about the name and more importantly <code class=\"language-text\">size</code> of the file we are receiving. These are transferred as text in</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">p2pConnection<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    fileName<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    fileSize<span class=\"token punctuation\">:</span> file<span class=\"token punctuation\">.</span>size\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and received in our P2pConnection’s <code class=\"language-text\">data</code> event. Our receiver is built on the assumption that each file transfer starts with a single text message followed by individual chunks in order until the full amount of bytes is received. This is the simplest scenario, but not the fastest. To speed-up transfers you may want to consider using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel#RTCDataChannelInit_dictionary\">unordered but reliable</a> transfers and reserving the first few bytes of every chunk to keep track of the packet order.</p>\n<p>Put together this would look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> incomingFileInfo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> incomingFileData<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bytesReceived<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> downloadInProgress <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\np2pConnection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> downloadInProgress <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">startDownload</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">progressDownload</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startDownload</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">data</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    incomingFileInfo <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    incomingFileData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    bytesReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    downloadInProgress <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'incoming file &lt;b>'</span> <span class=\"token operator\">+</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/b> of '</span> <span class=\"token operator\">+</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileSize <span class=\"token operator\">+</span> <span class=\"token string\">' bytes'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">progressDownload</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">data</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bytesReceived <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">;</span>\n    incomingFileData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'progress: '</span> <span class=\"token operator\">+</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytesReceived <span class=\"token operator\">/</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileSize <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'%'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bytesReceived <span class=\"token operator\">===</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileSize <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">endDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"downloading-a-file\"><a href=\"#downloading-a-file\" aria-label=\"downloading a file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>downloading a file</h2>\n<p>All that’s missing now is <code class=\"language-text\">endDownload</code> - a function that concatenates our received bytes and initiates a download. Assembling our file is achieved by simply casting our multiple byte-arrays in <code class=\"language-text\">incomingFileData</code> into a single Blob</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span> incomingFileData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The second part is a bit trickier - currently our entire file only exists in the browser’s memory. To trigger a download we generate a link. set its source to our Blob via</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    anchor<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span> blob <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>tell it what filename to use via</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    anchor<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>and finally invoke a (cross browserish) click</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">endDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    downloadInProgress <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>Blob</span><span class=\"token punctuation\">(</span> incomingFileData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> anchor <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    anchor<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span> blob <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    anchor<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> incomingFileInfo<span class=\"token punctuation\">.</span>fileName<span class=\"token punctuation\">;</span>\n    anchor<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'XXXXXXX'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> anchor<span class=\"token punctuation\">.</span>click <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        anchor<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> evt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'MouseEvents'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        evt<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        anchor<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span> evt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Phew - that was hard. But hey, it’s the last tutorial in this series. All that’s left now is to wrap up with <a href=\"/tutorials/webrtc/webrtc-in-production/\">an overview of what it takes to use WebRTC in production apps</a></p>","frontmatter":{"title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/98-webrtc/60-webrtc-file-transfer/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/webrtc/webrtc-file-transfer/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}