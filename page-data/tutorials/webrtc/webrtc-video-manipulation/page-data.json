{"componentChunkName":"component---src-templates-tutorials-tsx","path":"/tutorials/webrtc/webrtc-video-manipulation/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>In the <a href=\"../webrtc-audio-video\">previous tutorial</a> we’ve discussed how to share unaltered audio and video streams between browsers - but in times of Snapchat, dog snout overlays and vintage effect filters this might not be enough. So in this tutorial we’ll look into manipulating the video before sending.</p>\n<h2 id=\"how-it-works\"><a href=\"#how-it-works\" aria-label=\"how it works permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How it works</h2>\n<p><a href=\"steps.png\">Steps</a></p>\n<p>Manipulating videos takes a few steps:</p>\n<ol>\n<li>Capturing a webcam stream using <code class=\"language-text\">navigator.getUserMedia()</code></li>\n<li>Playing the stream on an HTML5 video element</li>\n<li>Painting each frame of this video onto an HTML5 Canvas Element</li>\n<li>Reading the pixels from the first canvas on every frame, manipulating them and drawing them onto a second canvas element</li>\n<li>Using the second canvas’ <code class=\"language-text\">.captureStream()</code> method to create a video stream and transmit it via our peer connection</li>\n<li>Receiving the manipulated stream on the other peer and playing it on a video tag</li>\n</ol>\n<p>Let’s go trough these steps one by one. You can find the complete <a href=\"https://github.com/deepstreamIO/dsh-demo-webrtc-examples/blob/master/04-canvas-streams/canvas-streams.js\">code on GitHub</a> or in the editable example below.</p>\n<h2 id=\"1--2-capturing-a-webcam-stream\"><a href=\"#1--2-capturing-a-webcam-stream\" aria-label=\"1  2 capturing a webcam stream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. / 2. Capturing a webcam stream</h2>\n<p>Capturing a webcam stream is done using <code class=\"language-text\">navigator.getUserMedia()</code> with a constraints object specifying what we need (only video in this case) and callbacks for success and error.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigator<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> video<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">stream</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        localStream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.local video'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span> stream <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">drawToCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'error while accessing usermedia '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once the stream becomes available, we’ll play it on a video tag using <code class=\"language-text\">URL.createObjectURL( stream )</code> as well as drawing it onto the first canvas element.</p>\n<h2 id=\"3-painting-a-video-to-a-canvas\"><a href=\"#3-painting-a-video-to-a-canvas\" aria-label=\"3 painting a video to a canvas permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Painting a video to a canvas</h2>\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial\">canvas</a> is an HTML5 element that can be used to draw pixel data. Our video is just that - a source of pixel data that changes on every drawn frame.</p>\n<p>To draw it onto a canvas we start by creating a canvas element with the same size as the video…</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">autoplay</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>225<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>225<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>…and acquire a 2d-drawing context from it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> localVideo <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.local video'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inputCtx <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.input-canvas canvas'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'2d'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now in our <code class=\"language-text\">drawToCanvas()</code> method we paint every frame of the video onto the canvas using <code class=\"language-text\">.drawImage()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">drawToCanvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// draw the current frame of localVideo onto the canvas,</span>\n    <span class=\"token comment\">// starting at 0, 0 (top-left corner) and covering its full</span>\n    <span class=\"token comment\">// width and heigth</span>\n    inputCtx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span> localVideo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">225</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//repeat this every time a new frame becomes available using</span>\n    <span class=\"token comment\">//the browser's build-in requestAnimationFrame method</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span> drawToCanvas <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-manipulating-the-videostream\"><a href=\"#4-manipulating-the-videostream\" aria-label=\"4 manipulating the videostream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Manipulating the videostream</h2>\n<p>At this point you should see two identical video-clips - one on a video tag, one on a canvas element. Now that our video is on a canvas, we can access its raw pixel-data using <code class=\"language-text\">ctx.getImageData()</code>, manipulate it and draw it onto the second canvas. We’ll do this in <code class=\"language-text\">drawToCanvas()</code> on every frame to apply a simple greyscale filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">// get the pixel data from input canvas</span>\n    <span class=\"token keyword\">var</span> pixelData <span class=\"token operator\">=</span> inputCtx<span class=\"token punctuation\">.</span><span class=\"token function\">getImageData</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> avg<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// apply a  simple greyscale transformation</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        avg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n            pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n            pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span>\n            pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> avg<span class=\"token punctuation\">;</span>\n        pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> avg<span class=\"token punctuation\">;</span>\n        pixelData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> avg<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// write the manipulated pixel data to the second canvas</span>\n    outputCtx<span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span> pixelData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"5-turn-the-manipulated-video-data-into-a-stream\"><a href=\"#5-turn-the-manipulated-video-data-into-a-stream\" aria-label=\"5 turn the manipulated video data into a stream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Turn the manipulated video data into a stream</h2>\n<p>The only thing left at this point is to establish a <a href=\"/tutorials/webrtc//webrtc-datachannels/\">simple peer connection</a> and provide a video stream from our output canvas using its <code class=\"language-text\">.captureStream()</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p2pConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimplePeer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    initiator<span class=\"token punctuation\">:</span> document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">===</span> <span class=\"token string\">'#initiator'</span><span class=\"token punctuation\">,</span>\n    stream<span class=\"token punctuation\">:</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.output-canvas canvas'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">captureStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"6-receiving-the-video-on-the-other-client\"><a href=\"#6-receiving-the-video-on-the-other-client\" aria-label=\"6 receiving the video on the other client permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Receiving the video on the other client</h2>\n<p>All the other client has to do now is to subscribe to its connection’s regular <code class=\"language-text\">&#39;stream&#39;</code> event and display the stream on a video tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">p2pConnection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'stream'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">remoteStream</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.remote video'</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span> remoteStream <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To summarize: mediastreams can not only be created from videos, but from a number of different resources such as audio elements, canvas or - as we’ll see in <a href=\"../webrtc-screen-sharing\">the next tutorial</a> - the entire browser window.</p>","frontmatter":{"title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","wip":null,"addedInVersion":null},"fields":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/tutorials/98-webrtc/40-webrtc-video-manipulation/index.md"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/tutorials/webrtc/webrtc-video-manipulation/","navigation":{"order":100,"concepts":{"order":0,"what-is-deepstream":{"slug":"/tutorials/concepts/what-is-deepstream/","title":"What is deepstream?","description":"A general introduction","leaf":true,"order":10,"":{"order":100}},"connectivity":{"slug":"/tutorials/concepts/connectivity/","title":"Connectivity","description":"Documentation for connection status and how to configure reconnection behaviour","leaf":true,"order":20,"":{"order":100}},"security":{"slug":"/tutorials/concepts/security/","title":"Security Overview","description":"How encryption, authentication and permissioning work together","leaf":true,"order":30,"":{"order":100}},"active-data-providers":{"slug":"/tutorials/concepts/active-data-providers/","title":"Active Data Providers","description":"How to boost your application performance by supplying data on demand","leaf":true,"order":50,"":{"order":100}},"modelling-relational-data":{"slug":"/tutorials/concepts/modelling-relational-data/","title":"Modelling relational data","description":"An overview of relational data concepts using Records","leaf":true,"order":40,"":{"order":100}}},"install":{"order":1,"linux":{"slug":"/tutorials/install/linux/","title":"Installing on Linux","description":"Learn how to install deepstream on Linux","leaf":true,"order":10,"":{"order":100}},"osx":{"slug":"/tutorials/install/osx/","title":"Installing on OSX","description":"Find out how to get deepstream running on OSX","leaf":true,"order":20,"":{"order":100}},"windows":{"slug":"/tutorials/install/windows/","title":"Installing on Windows","description":"Find out how to get deepstream running on Windows","leaf":true,"order":30,"":{"order":100}},"nodejs":{"slug":"/tutorials/install/nodejs/","title":"Node / NPM / Yarn","description":"Installing deepstream via NPM and and Node.js","leaf":true,"order":40,"":{"order":100}},"docker":{"slug":"/tutorials/install/docker/","title":"Docker Image","description":"Run a deepstream standalone container from an image. This tutorial will also explain how to build the image manually.","leaf":true,"order":50,"":{"order":100}}},"getting-started":{"order":10,"http":{"slug":"/tutorials/getting-started/http/","title":"Getting started with HTTP","description":"Learn how to start a server and interact with a HTTP API","leaf":true,"order":10,"":{"order":100}},"java":{"slug":"/tutorials/getting-started/java/","title":"Getting started with Java","description":"Learn how to build serverside realtime provider with deepstream and Java","leaf":true,"order":30,"":{"order":100}},"javascript":{"slug":"/tutorials/getting-started/javascript/","title":"Getting started with JavaScript","description":"Learn how to start a server and connect a simple client","leaf":true,"order":20,"":{"order":100}},"android":{"slug":"/tutorials/getting-started/android/","title":"Getting started with Android","description":"A getting started guide for deepstream with Android","leaf":true,"order":40,"":{"order":100}}},"core":{"order":20,"pubsub":{"slug":"/tutorials/core/pubsub/","title":"Events","description":"Learn how you can use events to implement  publish/subscribe and decouple your logic","leaf":true,"order":40,"":{"order":100}},"request-response":{"slug":"/tutorials/core/request-response/","title":"Remote Procedure Calls","description":"Learn how you can use RPCs for your request/response requirements","leaf":true,"order":50,"":{"order":100}},"presence":{"slug":"/tutorials/core/presence/","title":"Presence","description":"Presence allows us to query on the connected authenticated clients.","leaf":true,"order":60,"":{"order":100}},"auth":{"order":20,"none":{"slug":"/tutorials/core/auth/none/","title":"Auth None","description":"How to disable user authentication for simple applications and development","leaf":true,"order":10,"":{"order":100}},"file":{"slug":"/tutorials/core/auth/file/","title":"File Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata from a file","leaf":true,"order":20,"":{"order":100}},"storage":{"slug":"/tutorials/core/auth/storage/","title":"Storage Authentication","description":"A deepstream authentication mechanism that reads credentials and userdata via the storage adaptor","leaf":true,"order":21,"":{"order":100}},"http-webhook":{"slug":"/tutorials/core/auth/http-webhook/","title":"HTTP Authentication","description":"How to register your own HTTP server as a Webhook for user authentication","leaf":true,"order":30,"":{"order":100}},"jwt-auth":{"slug":"/tutorials/core/auth/jwt-auth/","title":"Authentication using JWT","description":"How to use JSON Web Token to authenticate with deepstream","leaf":true,"order":40,"":{"order":100}}},"permission":{"order":30,"valve-simple":{"slug":"/tutorials/core/permission/valve-simple/","title":"Valve Simple","description":"Learn the basics of Valve and permissions in deepstream","leaf":true,"order":20,"":{"order":100}},"valve-advanced":{"slug":"/tutorials/core/permission/valve-advanced/","title":"Valve Advanced","description":"Learn how to unlock the full potential of Valve","leaf":true,"order":30,"":{"order":100}},"valve-dynamic":{"slug":"/tutorials/core/permission/valve-dynamic/","title":"Valve Dynamic","description":"Realtime permissions that are readable on both client and server","leaf":true,"order":40,"":{"order":100}},"valve-introduction":{"slug":"/tutorials/core/permission/valve-introduction/","title":"Valve Introduction","description":"Learn permissions with Valve","leaf":true,"order":10,"":{"order":100}},"user-specific-data":{"slug":"/tutorials/core/permission/user-specific-data/","title":"User-Specific Data","description":"How to send different data for each user","leaf":true,"order":50,"":{"order":100}}},"datasync":{"order":70,"records":{"slug":"/tutorials/core/datasync/records/","title":"Records","description":"Learn how you can use records and access the powerful benefits of datasync","leaf":true,"order":10,"":{"order":100}},"anonymous-records":{"slug":"/tutorials/core/datasync/anonymous-records/","title":"Anonymous Records","description":"Learn how to use anonymous records to simplify working with dynamic selections","leaf":true,"order":20,"":{"order":100}},"lists":{"slug":"/tutorials/core/datasync/lists/","title":"Lists","description":"Learn how you can use lists to create collections out of records with attributes in common","leaf":true,"order":30,"":{"order":100}},"handling-data-conflicts":{"slug":"/tutorials/core/datasync/handling-data-conflicts/","title":"Handling Data Conflicts","description":"This tutorial explains how to handle merge conflicts in deepstream","leaf":true,"order":40,"":{"order":100}},"storing-data":{"slug":"/tutorials/core/datasync/storing-data/","title":"Storing Data","description":"Find out how deepstream uses cache and storage systems to store your data","leaf":true,"order":60,"":{"order":100}}},"listening":{"slug":"/tutorials/core/listening/","title":"Listening in deepstream","description":"Understanding Listening","leaf":true,"order":80,"":{"order":100}}},"custom-plugins":{"order":70,"custom-plugin":{"slug":"/tutorials/custom-plugins/custom-plugin/","title":"Custom Plugin","description":"Building your own custom plugin","leaf":true,"order":20,"":{"order":100}},"authentication":{"slug":"/tutorials/custom-plugins/authentication/","title":"Authentication Plugin","description":"Building your own authentication plugin","leaf":true,"order":30,"":{"order":100}},"permission":{"slug":"/tutorials/custom-plugins/permission/","title":"Permission Plugin","description":"Building your own permission plugin","leaf":true,"order":40,"":{"order":100}},"logger":{"slug":"/tutorials/custom-plugins/logger/","title":"Logger Plugin","description":"Building your own logger plugin","leaf":true,"order":50,"":{"order":100}},"storage":{"slug":"/tutorials/custom-plugins/storage/","title":"Storage Plugin","description":"Building your own storage plugin","leaf":true,"order":60,"":{"order":100}},"cache":{"slug":"/tutorials/custom-plugins/cache/","title":"Cache Plugin","description":"Building your own cache plugin","leaf":true,"order":70,"":{"order":100}},"cluster-node":{"slug":"/tutorials/custom-plugins/cluster-node/","title":"Cluster Node Plugin","description":"Building your own cluster node plugin","leaf":true,"order":90,"":{"order":100}},"monitoring":{"slug":"/tutorials/custom-plugins/monitoring/","title":"Monitoring Plugin","description":"Building your own monitoring plugin","leaf":true,"order":92,"":{"order":100}},"an-overview":{"slug":"/tutorials/custom-plugins/an-overview/","title":"Plugin Introduction","description":"What is a deepstream plugin and how can I make my own?","leaf":true,"order":10,"":{"order":100}}},"example-apps":{"order":75,"realtime-flight-tracker":{"slug":"/tutorials/example-apps/realtime-flight-tracker/","title":"Realtime Flight Tracker","description":"Building a realtime flight tracker with deepstream","leaf":true,"order":100,"":{"order":100}},"realtime-todo-list":{"slug":"/tutorials/example-apps/realtime-todo-list/","title":"Realtime ToDo List","description":"Learn how to create a realtime ToDo list using deepstream technology","leaf":true,"order":100,"":{"order":100}},"http-iot":{"slug":"/tutorials/example-apps/http-iot/","title":"IoT Light Sensor","description":"deepstream HTTP Internet of Things Light Sensor tutorial","leaf":true,"order":100,"":{"order":100}},"http-iot-stock-monitor":{"slug":"/tutorials/example-apps/http-iot-stock-monitor/","title":"IoT Fridge Monitor","description":"deepstream HTTP Internet of Things Fridge Monitor tutorial","leaf":true,"order":100,"":{"order":100}},"music-collection":{"slug":"/tutorials/example-apps/music-collection/","title":"Music Collection (CRUD)","description":"Realtime state management in CRUD apps using deepstream events","leaf":true,"order":100,"":{"order":100}},"realtime-friend-locator":{"slug":"/tutorials/example-apps/realtime-friend-locator/","title":"Realtime friend locator","description":"Create a web app that returns the location of those around you in Realtime","leaf":true,"order":100,"":{"order":100}},"realtime-comment-feed-using-vue":{"slug":"/tutorials/example-apps/realtime-comment-feed-using-vue/","title":"Realtime Comment Feed","description":"Learn how to create a realtime comment feeds with authentication using Vue","leaf":true,"order":100,"":{"order":100}}},"devops":{"order":80,"nginx":{"slug":"/tutorials/devops/nginx/","title":"Nginx","description":"Using Nginx as a reverse proxy and load balancer for Websocket traffic","leaf":true,"order":0,"":{"order":100}},"docker-compose":{"slug":"/tutorials/devops/docker-compose/","title":"Docker Compose","description":"Run deepstream together with a RethinkDB storage provider, a Redis cache provider and a RethinkDB search provider which allows to subscribe to realtime queries.","leaf":true,"order":30,"":{"order":100}}},"webrtc":{"order":98,"webrtc-intro":{"slug":"/tutorials/webrtc/webrtc-intro/","title":"WebRTC: Fundamentals & Concepts","description":"Learn what WebRTC is, how it works, what you need to get started and where this guide fits in","leaf":true,"order":0,"":{"order":100}},"webrtc-datachannels":{"slug":"/tutorials/webrtc/webrtc-datachannels/","title":"WebRTC 01: Data Channels","description":"Set up a WebRTC connection between two clients and send simple messages","leaf":true,"order":10,"":{"order":100}},"webrtc-full-mesh":{"slug":"/tutorials/webrtc/webrtc-full-mesh/","title":"WebRTC 02: Many-To-Many connectivity","description":"Learn how to setup WebRTC connections between multiple clients and share messages within rooms","leaf":true,"order":20,"":{"order":100}},"webrtc-audio-video":{"slug":"/tutorials/webrtc/webrtc-audio-video/","title":"WebRTC 03:Audio & Video","description":"Learn how to establish audio and video streams using deepstream","leaf":true,"order":30,"":{"order":100}},"webrtc-video-manipulation":{"slug":"/tutorials/webrtc/webrtc-video-manipulation/","title":"WebRTC 04: Video Editing / Canvas Streams","description":"Applying filters to a WebRTC video stream before transmitting it","leaf":true,"order":40,"":{"order":100}},"webrtc-screen-sharing":{"slug":"/tutorials/webrtc/webrtc-screen-sharing/","title":"WebRTC 05: Screen Sharing","description":"Create a video feed from your screen and share it via WebRTC","leaf":true,"order":50,"":{"order":100}},"webrtc-file-transfer":{"slug":"/tutorials/webrtc/webrtc-file-transfer/","title":"WebRTC 06: File Transfer","description":"Learn how to read, transfer, receive and download a file between two browsers","leaf":true,"order":60,"":{"order":100}},"webrtc-in-production":{"slug":"/tutorials/webrtc/webrtc-in-production/","title":"WebRTC in production","description":"Learn about the various approaches to video and audio streaming, connection re-establishment, file chunking etc. that are necessary for production ready WebRTC apps","leaf":true,"order":70,"":{"order":100}}},"integrations":{"order":50,"frontend":{"order":10,"react":{"slug":"/tutorials/integrations/frontend/react/","title":"React","description":"Learn how to use React with deepstream","leaf":true,"order":10,"":{"order":100}},"vuejs":{"slug":"/tutorials/integrations/frontend/vuejs/","title":"VueJS","description":"Learn how to add realtime features to your VueJS webapp and start using our realtime database in the browser.","leaf":true,"order":20,"":{"order":100}},"angular":{"slug":"/tutorials/integrations/frontend/angular/","title":"Angular","description":"Learn how to use Angular with deepstream","leaf":true,"order":30,"":{"order":100}},"knockout":{"slug":"/tutorials/integrations/frontend/knockout/","title":"KnockoutJs","description":"Learn how to use KnockoutJs with deepstream","leaf":true,"order":40,"":{"order":100}}},"mobile":{"order":20,"reactnative":{"slug":"/tutorials/integrations/mobile/reactnative/","title":"React Native","description":"Learn how to use React Native with deepstream","leaf":true,"order":10,"":{"order":100}},"ionic2":{"slug":"/tutorials/integrations/mobile/ionic2/","title":"Ionic","description":"Learn how to use Ionic with deepstream","leaf":true,"order":20,"":{"order":100}}}},"plugins":{"order":60,"cache":{"order":20,"hazelcast":{"slug":"/tutorials/plugins/cache/hazelcast/","title":"Hazelcast Cache Connector","description":"Learn how to use Hazelcast with deepstream","leaf":true,"order":100,"":{"order":100}},"memcached":{"slug":"/tutorials/plugins/cache/memcached/","title":"Memcached Cache Connector","description":"Learn how to use Memcached with deepstream","leaf":true,"order":100,"":{"order":100}},"redis":{"slug":"/tutorials/plugins/cache/redis/","title":"Redis Cache Connector","description":"Learn how to use Redis with deepstream for cache","leaf":true,"order":100,"":{"order":100}}},"database":{"order":30,"mongodb":{"slug":"/tutorials/plugins/database/mongodb/","title":"MongoDB DataBase Connector","description":"Learn how to use MongoDB with deepstream","leaf":true,"order":100,"":{"order":100}},"postgres":{"slug":"/tutorials/plugins/database/postgres/","title":"Postgres DataBase Connector","description":"Learn how to use Postgres with deepstream","leaf":true,"order":100,"":{"order":100}},"rethinkdb":{"slug":"/tutorials/plugins/database/rethinkdb/","title":"RethinkDB DataBase Connector","description":"Learn how to use RethinkDB with deepstream","leaf":true,"order":100,"":{"order":100}},"elasticsearch":{"slug":"/tutorials/plugins/database/elasticsearch/","title":"ElasticSearch DataBase Connector","description":"Learn how to use ElasticSearch with deepstream","leaf":true,"order":100,"":{"order":100}}},"http-service":{"order":39,"node-and-ws":{"slug":"/tutorials/plugins/http-service/node-and-ws/","title":"Node HTTP","description":"Learn how to configure the node HTTP Service","leaf":true,"order":20,"":{"order":100}},"uws":{"slug":"/tutorials/plugins/http-service/uws/","title":"UWS HTTP","description":"Learn how to configure the UWS HTTP Service","leaf":true,"order":60,"":{"order":100}}},"connection-endpoint":{"order":40,"http":{"slug":"/tutorials/plugins/connection-endpoint/http/","title":"HTTP Endpoint","description":"Learn how to configure a HTTP Endpoint","leaf":true,"order":0,"":{"order":100}},"websocket-binary":{"slug":"/tutorials/plugins/connection-endpoint/websocket-binary/","title":"Binary WebSocket Endpoint","description":"Learn how to configure the default binary WS Websocket Endpoint","leaf":true,"order":1,"":{"order":100}},"websocket-json":{"slug":"/tutorials/plugins/connection-endpoint/websocket-json/","title":"JSON Endpoint","description":"Learn how to configure a JSON based  Websocket Endpoint","leaf":true,"order":2,"":{"order":100}},"websocket-v3":{"slug":"/tutorials/plugins/connection-endpoint/websocket-v3/","title":"V3 Text Protocol","description":"Learn how to configure a V3 compatible endpoint","leaf":true,"order":3,"":{"order":100}},"mqtt":{"slug":"/tutorials/plugins/connection-endpoint/mqtt/","title":"MQTT","description":"Learn how to configure a MQTT Endpoint","leaf":true,"order":80,"":{"order":100}}},"clusternode":{"order":50,"redis":{"slug":"/tutorials/plugins/clusternode/redis/","title":"Redis Cluster Connector","description":"Learn how to use Redis with deepstream for clustering","leaf":true,"order":100,"":{"order":100}}},"monitoring":{"order":60,"http":{"slug":"/tutorials/plugins/monitoring/http/","title":"HTTP Monitoring","description":"Learn how to use monitor deepstream using http","leaf":true,"order":100,"":{"order":100}}}},"upgrade-guides":{"order":99,"v4":{"order":100,"server":{"slug":"/tutorials/upgrade-guides/v4/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V4","leaf":true,"order":10,"":{"order":100}},"client":{"slug":"/tutorials/upgrade-guides/v4/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V4","leaf":true,"order":20,"":{"order":100}}},"v5":{"order":100,"client":{"slug":"/tutorials/upgrade-guides/v5/client/","title":"Upgrading the js client","description":"Upgrading the deepstream js/node client to V5","leaf":true,"order":20,"":{"order":100}},"server":{"slug":"/tutorials/upgrade-guides/v5/server/","title":"Upgrading the server","description":"Upgrading the deepstream server to V5","leaf":true,"order":10,"":{"order":100}}}}}}}}