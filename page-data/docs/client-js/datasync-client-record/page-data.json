{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/client-js/datasync-client-record/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p><code class=\"language-text\">client.record</code> gives you access to all methods related to data-sync.</p>\n<h2 id=\"prerequisite\"><a href=\"#prerequisite\" aria-label=\"prerequisite permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prerequisite</h2>\n<p>You need to connect to the deepstream server:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DeepstreamClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@deepstream/client'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">deepstream</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"methods\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"clientrecordgetrecordname\"><a href=\"#clientrecordgetrecordname\" aria-label=\"clientrecordgetrecordname permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.getRecord(name)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>false</td>\n<td>The name of the record.</td>\n</tr>\n</tbody>\n</table>\n<p>Retrieves and if necessary creates a <a href=\"/docs/client-js/datasync-record/\">Record</a> with the given name. Records are persistent data structures that are synced between clients. To learn more about what they are used for and how they work, head over to the <a href=\"/tutorials/core/datasync/records/\">record tutorial</a>.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>The record will be loaded asynchronously. To ensure the record is loaded put your logic into the <a href=\"/tutorials/core/datasync/records/\">whenReady</a> callback.</p></div></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"clientrecordgetlistname\"><a href=\"#clientrecordgetlistname\" aria-label=\"clientrecordgetlistname permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.getList(name)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>false</td>\n<td>The name of the list.</td>\n</tr>\n</tbody>\n</table>\n<p>Retrieves or creates a <a href=\"../datasync-list/\">List</a> with the given name. Lists are arrays of recordNames that clients can manipulate and observe. You can learn more about them in the <a href=\"/tutorials/core/datasync/lists/\">list tutorial</a>.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>The list will be loaded asynchronously. To ensure the list is loaded put your logic into the <a href=\"/tutorials/core/datasync/records/\">whenReady</a> callback.</p></div></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> beatlesAlbums <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'albums'</span><span class=\"token punctuation\">)</span>\nbeatlesAlbums<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>beatlesAlbums<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n  [\n    \"album/i9l0z34v-109vblpqddy\",\n    \"album/i9l0z3v4-ibrbp139rbr\",\n    \"album/i9l0z4d8-1w0p8xnk1sy\"\n  ]\n*/</span></code></pre></div>\n<h3 id=\"clientrecordgetanonymousrecord\"><a href=\"#clientrecordgetanonymousrecord\" aria-label=\"clientrecordgetanonymousrecord permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.getAnonymousRecord()</h3>\n<p>Returns an <a href=\"../datasync-anonymous-record/\">AnonymousRecord</a>.</p>\n<p>An AnonymousRecord is a record that can change its name. It\nacts as a wrapper around an actual record that can\nbe swapped out for another one whilst keeping all bindings intact.\nYou can learn more about anonymous records <a href=\"/tutorials/core/datasync/anonymous-records/\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getAnonymousRecord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrecord<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">)</span>\nrecord<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/maxpower'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"clientrecordhasname-callback\"><a href=\"#clientrecordhasname-callback\" aria-label=\"clientrecordhasname callback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.has(name, callback)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>false</td>\n<td>The name of the record.</td>\n</tr>\n<tr>\n<td>callback</td>\n<td>Function</td>\n<td>true</td>\n<td>Arguments are (String) error and (Boolean) hasRecord</td>\n</tr>\n</tbody>\n</table>\n<p>The callback contains an error argument and a boolean to indicate whether or not the record exists in deepstream. This is useful to avoid creating a record via <code class=\"language-text\">getRecord( name )</code> if you only want to edit the contents. The callback is invoked immediately if the record exists on the client.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Callback</span>\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> hasRecord</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Promise</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hasRecord <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"clientrecordsnapshotname-callback\"><a href=\"#clientrecordsnapshotname-callback\" aria-label=\"clientrecordsnapshotname callback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.snapshot(name, callback)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>false</td>\n<td>The name of the record.</td>\n</tr>\n<tr>\n<td>callback</td>\n<td>Function</td>\n<td>true</td>\n<td>Arguments are (String) error and (Object) data</td>\n</tr>\n</tbody>\n</table>\n<p>The callback contains the record’s content without subscribing to updates. This can be used to avoid scenarios where you would request the record and discard it immediately afterwards. The callback is invoked immediately if the record data is already loaded and ready.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Callback</span>\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Promise</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/johndoe'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"clientrecordsetdataname-path-data-callback\"><a href=\"#clientrecordsetdataname-path-data-callback\" aria-label=\"clientrecordsetdataname path data callback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.setData(name, path, data, callback)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>false</td>\n<td>The name of the record.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>String</td>\n<td>true</td>\n<td>The path of the record to set data.</td>\n</tr>\n<tr>\n<td>data</td>\n<td>Various</td>\n<td>false</td>\n<td>The data to set on the record.</td>\n</tr>\n<tr>\n<td>callback</td>\n<td>Function</td>\n<td>true</td>\n<td>Arguments are (String) error</td>\n</tr>\n</tbody>\n</table>\n<p>An upsert operation that allows updating of a record without being subscribed to it. If the record does not exist deepstream will try and permission the request to create the record. The callback if provided will be called with any errors that occurred while writing to the record.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Set the entire record's data - record will be created if it doesn't exist</span>\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/homer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'married'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Update only marriage status</span>\nrecord<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/homer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'single'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Set the entire record's data with write acknowledgement</span>\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/homer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'married'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Update only a property with write acknowledgement</span>\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/homer'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'son'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bart'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"clientrecordlistenpattern-callback\"><a href=\"#clientrecordlistenpattern-callback\" aria-label=\"clientrecordlistenpattern callback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.listen(pattern, callback)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pattern</td>\n<td>String (regex)</td>\n<td>false</td>\n<td>The pattern to match records which subscription status you want to be informed of</td>\n</tr>\n<tr>\n<td>callback</td>\n<td>Function</td>\n<td>false</td>\n<td>A function that will be called whenever a record matching the <code class=\"language-text\">pattern</code> has been initially subscribed to. When there are no more subscriptions to any records matching <code class=\"language-text\">pattern</code>, the callback passed to <code class=\"language-text\">response.onStop()</code> is called. Arguments are (String) match, and response (Object).</td>\n</tr>\n</tbody>\n</table>\n<p>Allows to listen for record subscriptions made by other clients. This is useful to create “active” data providers, e.g. providers that only provide data for records that users are actually interested in. You can find more about listening in the <a href=\"/tutorials/core/datasync/records/\">record tutorial</a>.</p>\n<p>The callback is invoked with three arguments:</p>\n<ul>\n<li><strong>match</strong>: The name of the record that has been matched against the provided pattern</li>\n<li><strong>response</strong>: contains two functions (<code class=\"language-text\">accept</code> and <code class=\"language-text\">reject</code>), one of them needs to be called</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'raceHorse/.*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// see tutorial for more details</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>The callback will be called for all matching subscriptions that already exist at the time its registered.</p></div></div>\n<h3 id=\"clientrecordunlistenpattern\"><a href=\"#clientrecordunlistenpattern\" aria-label=\"clientrecordunlistenpattern permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>client.record.unlisten(pattern)</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pattern</td>\n<td>String (regex)</td>\n<td>false</td>\n<td>The previously registered pattern</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">unlisten</span><span class=\"token punctuation\">(</span><span class=\"token string\">'raceHorse/.*'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Removes a listener that was previously registered using <code class=\"language-text\">listen()</code>.</p>","frontmatter":{"title":"Record Factory","wip":null,"addedInVersion":null},"fields":{"slug":"/docs/client-js/datasync-client-record/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/docs/40-client-js/80-datasync-client-record/index.md","weightedSlug":"/docs/40-client-js/80-datasync-client-record/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/client-js/datasync-client-record/","navigation":{"order":100,"server":{"order":10,"command-line-interface":{"slug":"/docs/server/command-line-interface/","title":"Command Line Interface","description":"The options that can be passed to the deepstream server via the command line","leaf":true,"order":20,"":{"order":100}},"node-api":{"slug":"/docs/server/node-api/","title":"Node API","description":"API docs for using deepstream within your own node application","leaf":true,"order":30,"":{"order":100}},"user-file":{"slug":"/docs/server/user-file/","title":"User File","description":"The API on how you can configure and use file-based authentication","leaf":true,"order":100,"":{"order":100}},"valve-permissions":{"slug":"/docs/server/valve-permissions/","title":"Valve Permissions","description":"The API for Valve, deepstream's powerful permissioning mechanism","leaf":true,"order":100,"":{"order":100}},"configuration":{"slug":"/docs/server/configuration/","title":"Configuration","description":"The available configuration options to customize deepstream","leaf":true,"order":10,"":{"order":100}}},"client-js":{"order":40,"client":{"slug":"/docs/client-js/client/","title":"Javascript Client","description":"The entry point API documentation for the deepstream.io js client","leaf":true,"order":0,"":{"order":100}},"options":{"slug":"/docs/client-js/options/","title":"Options","description":"The options that the deepstream javascript client can be initialized with","leaf":true,"order":10,"":{"order":100}},"event":{"slug":"/docs/client-js/event/","title":"Event","description":"API docs for deepstream's events, the many to many broadcasting mechanism","leaf":true,"order":20,"":{"order":100}},"presence":{"slug":"/docs/client-js/presence/","title":"Presence","description":"API docs for deepstream's presence feature, allowing clients to know about other connected clients","leaf":true,"order":30,"":{"order":100}},"reqres-client-rpc":{"slug":"/docs/client-js/reqres-client-rpc/","title":"RPC","description":"The API docs for remote procedure calls, deepstream's request-response mechanism","leaf":true,"order":40,"":{"order":100}},"reqres-response":{"slug":"/docs/client-js/reqres-response/","title":"RPC Response","description":"The API docs for deepstream's RPC response object","leaf":true,"order":50,"":{"order":100}},"datasync-client-record":{"slug":"/docs/client-js/datasync-client-record/","title":"Record Factory","description":"This class gives you access to all methods related to data-sync","leaf":true,"order":80,"":{"order":100}},"datasync-anonymous-record":{"slug":"/docs/client-js/datasync-anonymous-record/","title":"Anonymous Record","description":"Learn how to use anonymous records to switch context without having to renew bindings","leaf":true,"order":90,"":{"order":100}},"datasync-list":{"slug":"/docs/client-js/datasync-list/","title":"List","description":"API docs for deepstream's list object, a manageable collection of record names","leaf":true,"order":99,"":{"order":100}},"datasync-record":{"slug":"/docs/client-js/datasync-record/","title":"Record","description":"The API docs for deepstream records","leaf":true,"order":70,"":{"order":100}}},"client-java-v2":{"order":50,"DeepstreamFactory":{"slug":"/docs/client-java-v2/DeepstreamFactory/","title":"Class DeepstreamFactory","description":"A singleton that allows for shared access to a client instance","leaf":true,"order":0,"":{"order":100}},"DeepstreamClient":{"slug":"/docs/client-java-v2/DeepstreamClient/","title":"Class DeepstreamClient","description":"The main entrypoint for client operations","leaf":true,"order":10,"":{"order":100}},"ConnectionStateListener":{"slug":"/docs/client-java-v2/ConnectionStateListener/","title":"Interface ConnectionStateListener","description":"A listener that's notified whenever the client's connections tate changes","leaf":true,"order":100,"":{"order":100}},"DeepstreamRuntimeErrorHandler":{"slug":"/docs/client-java-v2/DeepstreamRuntimeErrorHandler/","title":"Class DeepstreamRuntimeErrorHandler","description":"Allows for all runtime errors to be caught in a single place","leaf":true,"order":100,"":{"order":100}},"EventHandler":{"slug":"/docs/client-java-v2/EventHandler/","title":"Class EventHandler","description":"The main entry point to deepstream's publish-subscribe mechanism","leaf":true,"order":100,"":{"order":100}},"EventListener":{"slug":"/docs/client-java-v2/EventListener/","title":"Interface EventListener","description":"A listener that's notified whenever an event is received via deepstream's pub-sub mechanism","leaf":true,"order":100,"":{"order":100}},"HasResult":{"slug":"/docs/client-java-v2/HasResult/","title":"Class HasResult","description":"A class representing the outcome of a record Has","leaf":true,"order":100,"":{"order":100}},"List":{"slug":"/docs/client-java-v2/List/","title":"Class List","description":"An observable collection of record names, useful to model relational structures","leaf":true,"order":100,"":{"order":100}},"ListChangedListener":{"slug":"/docs/client-java-v2/ListChangedListener/","title":"Interface ListChangedListener","description":"A listener that's notified whenever any change to a list occurs","leaf":true,"order":100,"":{"order":100}},"ListEntryChangedListener":{"slug":"/docs/client-java-v2/ListEntryChangedListener/","title":"Interface ListEntryChangedListener","description":"A listener that's notified whenever entries are added, removed or moved within a List","leaf":true,"order":100,"":{"order":100}},"ListenListener":{"slug":"/docs/client-java-v2/ListenListener/","title":"Interface ListenListener","description":"An interface that notifies whenever a pattern match has been found or removed","leaf":true,"order":100,"":{"order":100}},"LoginResult":{"slug":"/docs/client-java-v2/LoginResult/","title":"Class LoginResult","description":"An object containing information about the last login attempt","leaf":true,"order":100,"":{"order":100}},"PresenceEventListener":{"slug":"/docs/client-java-v2/PresenceEventListener/","title":"Interface PresenceEventListener","description":"A listener that's notified whenever an authenticated client logs into or out of deepstream","leaf":true,"order":100,"":{"order":100}},"PresenceHandler":{"slug":"/docs/client-java-v2/PresenceHandler/","title":"Class PresenceHandler","description":"The main entry point to deepstream's presence mechanism","leaf":true,"order":100,"":{"order":100}},"RecordChangedCallback":{"slug":"/docs/client-java-v2/RecordChangedCallback/","title":"Interface RecordChangedCallback","description":"A listener that's notified whenever the data within a record changes","leaf":true,"order":100,"":{"order":100}},"RecordEventsListener":{"slug":"/docs/client-java-v2/RecordEventsListener/","title":"Interface RecordEventsListener","description":"A listener that's notified whenever a record is deleted, or discarded","leaf":true,"order":100,"":{"order":100}},"RecordHandler":{"slug":"/docs/client-java-v2/RecordHandler/","title":"Class RecordHandler","description":"The main access point for the creation of Records, Lists and Anonymous Records","leaf":true,"order":100,"":{"order":100}},"RecordMergeStrategy":{"slug":"/docs/client-java-v2/RecordMergeStrategy/","title":"Class RecordMergeStategy","description":"A collection of strategies that will be applied to resolve data-conflicts","leaf":true,"order":100,"":{"order":100}},"RecordPathChangedCallback":{"slug":"/docs/client-java-v2/RecordPathChangedCallback/","title":"Interface RecordPathChangedCallback","description":"A listener that's notified whenever the value of a path within a record changes","leaf":true,"order":100,"":{"order":100}},"RecordSetResult":{"slug":"/docs/client-java-v2/RecordSetResult/","title":"Class RecordSetResult","description":"A class representing the outcome of a Record write","leaf":true,"order":100,"":{"order":100}},"RpcHandler":{"slug":"/docs/client-java-v2/RpcHandler/","title":"Class RpcHandler","description":"The main access point for Remote Procedure Calls - deepstream's request-response mechanism","leaf":true,"order":100,"":{"order":100}},"RpcRequestedListener":{"slug":"/docs/client-java-v2/RpcRequestedListener/","title":"Interface RpcRequestedListener","description":"A listener that's notified with the response to a Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"RpcResponse":{"slug":"/docs/client-java-v2/RpcResponse/","title":"Class RpcResponse","description":"A class representing the response to a Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"RpcResult":{"slug":"/docs/client-java-v2/RpcResult/","title":"Class RpcResult","description":"A class representing the outcome of an Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"SnapshotResult":{"slug":"/docs/client-java-v2/SnapshotResult/","title":"Class SnapshotResult","description":"A class representing the outcome of a Snapshot","leaf":true,"order":100,"":{"order":100}},"exceptions":{"slug":"/docs/client-java-v2/exceptions/","title":"Exceptions","description":"Java Client exceptions","leaf":true,"order":100,"":{"order":100}},"Record":{"slug":"/docs/client-java-v2/Record/","title":"Class Record","description":"The main object of deepstream's realtime datastore","leaf":true,"order":100,"":{"order":100}},"AnonymousRecord":{"slug":"/docs/client-java-v2/AnonymousRecord/","title":"Class AnonymousRecord","description":"An AnonymousRecord acts as a wrapper around an actual record, allowing it to be swapped whilst keeping all bindings intact","leaf":true,"order":100,"":{"order":100}},"Actions":{"slug":"/docs/client-java-v2/Actions/","title":"Class Actions","description":"All the actions in the deepstream client","leaf":true,"order":100,"":{"order":100}},"AnonymousRecordNameChangedListener":{"slug":"/docs/client-java-v2/AnonymousRecordNameChangedListener/","title":"Interface AnonymousRecordNameChangedListener","description":"A listener that's notified whenever an AnonymousRecord's name is changed","leaf":true,"order":100,"":{"order":100}}},"client-http":{"order":30,"v1":{"slug":"/docs/client-http/v1/","title":"HTTP API","description":"The reference for deepstream's HTTP API","leaf":true,"order":100,"":{"order":100}}}}}}}