{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/client-js/reqres-response/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>The RPC response object is passed to the callback registered with <code class=\"language-text\">client.rpc.provide()</code>. It allows RPC providers to decide how to react to an incoming request.</p>\n<h2 id=\"methods\"><a href=\"#methods\" aria-label=\"methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methods</h2>\n<h3 id=\"responsesend-data-\"><a href=\"#responsesend-data-\" aria-label=\"responsesend data  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>response.send( data )</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>Mixed</td>\n<td>false</td>\n<td>Any serializable response data</td>\n</tr>\n</tbody>\n</table>\n<p>Succesfully complete a remote procedure call and send data back to the requesting client.</p>\n<p><code class=\"language-text\">data</code> can be any kind of serializable data, e.g., Objects, Numbers, Booleans, or Strings.</p>\n<p>If <code class=\"language-text\">autoAck</code> is disabled and the response is sent before the ack message arrives, then the request will still be completed and the ack message will be ignored.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'add-two-numbers'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span> data<span class=\"token punctuation\">.</span>numA <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>numB <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"responsereject\"><a href=\"#responsereject\" aria-label=\"responsereject permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>response.reject()</h3>\n<p>Rejects the request. Rejections are not errors but merely a means of saying “I’m busy at the moment, try another client”. Upon receiving a rejection, deepstream will try to re-route the request to another provider for the same RPC. If there are no more providers left to try, deepstream will send a <code class=\"language-text\">NO_RPC_PROVIDER</code> error to the client.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add-two-numbers'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//reject the response so that it gets</span>\n  <span class=\"token comment\">//re-routed to another provider</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"error-errormsg-\"><a href=\"#error-errormsg-\" aria-label=\"error errormsg  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>error( errorMsg )</h3>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Type</th>\n<th>Optional</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>errorMsg</td>\n<td>Variant</td>\n<td>false</td>\n<td>A result object that will be passed as an error to the RPC requester.</td>\n</tr>\n</tbody>\n</table>\n<p>Send an error to the client. <code class=\"language-text\">errorMsg</code> will be received as the first argument to the callback registered with <code class=\"language-text\">client.rpc.make()</code>. This will complete the RPC.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'count-vote'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">hasAlreadyVoted</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   response<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'You can only vote once'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"responseack\"><a href=\"#responseack\" aria-label=\"responseack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>response.ack()</h3>\n<p>Explicitly acknowledges the receipt of a request.</p>\n<p>This is usually done automatically but can also be performed explicitly by setting <code class=\"language-text\">response.autoAck = false</code> and calling <code class=\"language-text\">ack()</code> later. This is useful when a client needs to perform an asynchronous operation to determine if it will accept or reject the request.</p>\n<div class=\"custom-block info\"><div class=\"custom-block-body\"><p>Requests count as completed once <code class=\"language-text\">send()</code> or <code class=\"language-text\">error()</code> was called. Calling <code class=\"language-text\">ack()</code> after that won’t do anything.</p></div></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'support/billing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Turn of automatic acknowledgements. This needs to happen synchronously</span>\n  response<span class=\"token punctuation\">.</span>autoAck <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\">// Acknowledge the request yourself at a later point</span>\n  <span class=\"token function\">hasCapacities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">ack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"RPC Response","wip":null,"addedInVersion":null},"fields":{"slug":"/docs/client-js/reqres-response/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/docs/40-client-js/50-reqres-response/index.md","weightedSlug":"/docs/40-client-js/50-reqres-response/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/client-js/reqres-response/","navigation":{"order":100,"server":{"order":10,"command-line-interface":{"slug":"/docs/server/command-line-interface/","title":"Command Line Interface","description":"The options that can be passed to the deepstream server via the command line","leaf":true,"order":20,"":{"order":100}},"node-api":{"slug":"/docs/server/node-api/","title":"Node API","description":"API docs for using deepstream within your own node application","leaf":true,"order":30,"":{"order":100}},"user-file":{"slug":"/docs/server/user-file/","title":"User File","description":"The API on how you can configure and use file-based authentication","leaf":true,"order":100,"":{"order":100}},"valve-permissions":{"slug":"/docs/server/valve-permissions/","title":"Valve Permissions","description":"The API for Valve, deepstream's powerful permissioning mechanism","leaf":true,"order":100,"":{"order":100}},"configuration":{"slug":"/docs/server/configuration/","title":"Configuration","description":"The available configuration options to customize deepstream","leaf":true,"order":10,"":{"order":100}}},"client-js":{"order":40,"client":{"slug":"/docs/client-js/client/","title":"Javascript Client","description":"The entry point API documentation for the deepstream.io js client","leaf":true,"order":0,"":{"order":100}},"options":{"slug":"/docs/client-js/options/","title":"Options","description":"The options that the deepstream javascript client can be initialized with","leaf":true,"order":10,"":{"order":100}},"event":{"slug":"/docs/client-js/event/","title":"Event","description":"API docs for deepstream's events, the many to many broadcasting mechanism","leaf":true,"order":20,"":{"order":100}},"presence":{"slug":"/docs/client-js/presence/","title":"Presence","description":"API docs for deepstream's presence feature, allowing clients to know about other connected clients","leaf":true,"order":30,"":{"order":100}},"reqres-client-rpc":{"slug":"/docs/client-js/reqres-client-rpc/","title":"RPC","description":"The API docs for remote procedure calls, deepstream's request-response mechanism","leaf":true,"order":40,"":{"order":100}},"reqres-response":{"slug":"/docs/client-js/reqres-response/","title":"RPC Response","description":"The API docs for deepstream's RPC response object","leaf":true,"order":50,"":{"order":100}},"datasync-client-record":{"slug":"/docs/client-js/datasync-client-record/","title":"Record Factory","description":"This class gives you access to all methods related to data-sync","leaf":true,"order":80,"":{"order":100}},"datasync-anonymous-record":{"slug":"/docs/client-js/datasync-anonymous-record/","title":"Anonymous Record","description":"Learn how to use anonymous records to switch context without having to renew bindings","leaf":true,"order":90,"":{"order":100}},"datasync-list":{"slug":"/docs/client-js/datasync-list/","title":"List","description":"API docs for deepstream's list object, a manageable collection of record names","leaf":true,"order":99,"":{"order":100}},"datasync-record":{"slug":"/docs/client-js/datasync-record/","title":"Record","description":"The API docs for deepstream records","leaf":true,"order":70,"":{"order":100}}},"client-java-v2":{"order":50,"DeepstreamFactory":{"slug":"/docs/client-java-v2/DeepstreamFactory/","title":"Class DeepstreamFactory","description":"A singleton that allows for shared access to a client instance","leaf":true,"order":0,"":{"order":100}},"DeepstreamClient":{"slug":"/docs/client-java-v2/DeepstreamClient/","title":"Class DeepstreamClient","description":"The main entrypoint for client operations","leaf":true,"order":10,"":{"order":100}},"ConnectionStateListener":{"slug":"/docs/client-java-v2/ConnectionStateListener/","title":"Interface ConnectionStateListener","description":"A listener that's notified whenever the client's connections tate changes","leaf":true,"order":100,"":{"order":100}},"DeepstreamRuntimeErrorHandler":{"slug":"/docs/client-java-v2/DeepstreamRuntimeErrorHandler/","title":"Class DeepstreamRuntimeErrorHandler","description":"Allows for all runtime errors to be caught in a single place","leaf":true,"order":100,"":{"order":100}},"EventHandler":{"slug":"/docs/client-java-v2/EventHandler/","title":"Class EventHandler","description":"The main entry point to deepstream's publish-subscribe mechanism","leaf":true,"order":100,"":{"order":100}},"EventListener":{"slug":"/docs/client-java-v2/EventListener/","title":"Interface EventListener","description":"A listener that's notified whenever an event is received via deepstream's pub-sub mechanism","leaf":true,"order":100,"":{"order":100}},"HasResult":{"slug":"/docs/client-java-v2/HasResult/","title":"Class HasResult","description":"A class representing the outcome of a record Has","leaf":true,"order":100,"":{"order":100}},"List":{"slug":"/docs/client-java-v2/List/","title":"Class List","description":"An observable collection of record names, useful to model relational structures","leaf":true,"order":100,"":{"order":100}},"ListChangedListener":{"slug":"/docs/client-java-v2/ListChangedListener/","title":"Interface ListChangedListener","description":"A listener that's notified whenever any change to a list occurs","leaf":true,"order":100,"":{"order":100}},"ListEntryChangedListener":{"slug":"/docs/client-java-v2/ListEntryChangedListener/","title":"Interface ListEntryChangedListener","description":"A listener that's notified whenever entries are added, removed or moved within a List","leaf":true,"order":100,"":{"order":100}},"ListenListener":{"slug":"/docs/client-java-v2/ListenListener/","title":"Interface ListenListener","description":"An interface that notifies whenever a pattern match has been found or removed","leaf":true,"order":100,"":{"order":100}},"LoginResult":{"slug":"/docs/client-java-v2/LoginResult/","title":"Class LoginResult","description":"An object containing information about the last login attempt","leaf":true,"order":100,"":{"order":100}},"PresenceEventListener":{"slug":"/docs/client-java-v2/PresenceEventListener/","title":"Interface PresenceEventListener","description":"A listener that's notified whenever an authenticated client logs into or out of deepstream","leaf":true,"order":100,"":{"order":100}},"PresenceHandler":{"slug":"/docs/client-java-v2/PresenceHandler/","title":"Class PresenceHandler","description":"The main entry point to deepstream's presence mechanism","leaf":true,"order":100,"":{"order":100}},"RecordChangedCallback":{"slug":"/docs/client-java-v2/RecordChangedCallback/","title":"Interface RecordChangedCallback","description":"A listener that's notified whenever the data within a record changes","leaf":true,"order":100,"":{"order":100}},"RecordEventsListener":{"slug":"/docs/client-java-v2/RecordEventsListener/","title":"Interface RecordEventsListener","description":"A listener that's notified whenever a record is deleted, or discarded","leaf":true,"order":100,"":{"order":100}},"RecordHandler":{"slug":"/docs/client-java-v2/RecordHandler/","title":"Class RecordHandler","description":"The main access point for the creation of Records, Lists and Anonymous Records","leaf":true,"order":100,"":{"order":100}},"RecordMergeStrategy":{"slug":"/docs/client-java-v2/RecordMergeStrategy/","title":"Class RecordMergeStategy","description":"A collection of strategies that will be applied to resolve data-conflicts","leaf":true,"order":100,"":{"order":100}},"RecordPathChangedCallback":{"slug":"/docs/client-java-v2/RecordPathChangedCallback/","title":"Interface RecordPathChangedCallback","description":"A listener that's notified whenever the value of a path within a record changes","leaf":true,"order":100,"":{"order":100}},"RecordSetResult":{"slug":"/docs/client-java-v2/RecordSetResult/","title":"Class RecordSetResult","description":"A class representing the outcome of a Record write","leaf":true,"order":100,"":{"order":100}},"RpcHandler":{"slug":"/docs/client-java-v2/RpcHandler/","title":"Class RpcHandler","description":"The main access point for Remote Procedure Calls - deepstream's request-response mechanism","leaf":true,"order":100,"":{"order":100}},"RpcRequestedListener":{"slug":"/docs/client-java-v2/RpcRequestedListener/","title":"Interface RpcRequestedListener","description":"A listener that's notified with the response to a Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"RpcResponse":{"slug":"/docs/client-java-v2/RpcResponse/","title":"Class RpcResponse","description":"A class representing the response to a Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"RpcResult":{"slug":"/docs/client-java-v2/RpcResult/","title":"Class RpcResult","description":"A class representing the outcome of an Remote Procedure Call","leaf":true,"order":100,"":{"order":100}},"SnapshotResult":{"slug":"/docs/client-java-v2/SnapshotResult/","title":"Class SnapshotResult","description":"A class representing the outcome of a Snapshot","leaf":true,"order":100,"":{"order":100}},"exceptions":{"slug":"/docs/client-java-v2/exceptions/","title":"Exceptions","description":"Java Client exceptions","leaf":true,"order":100,"":{"order":100}},"Record":{"slug":"/docs/client-java-v2/Record/","title":"Class Record","description":"The main object of deepstream's realtime datastore","leaf":true,"order":100,"":{"order":100}},"AnonymousRecord":{"slug":"/docs/client-java-v2/AnonymousRecord/","title":"Class AnonymousRecord","description":"An AnonymousRecord acts as a wrapper around an actual record, allowing it to be swapped whilst keeping all bindings intact","leaf":true,"order":100,"":{"order":100}},"Actions":{"slug":"/docs/client-java-v2/Actions/","title":"Class Actions","description":"All the actions in the deepstream client","leaf":true,"order":100,"":{"order":100}},"AnonymousRecordNameChangedListener":{"slug":"/docs/client-java-v2/AnonymousRecordNameChangedListener/","title":"Interface AnonymousRecordNameChangedListener","description":"A listener that's notified whenever an AnonymousRecord's name is changed","leaf":true,"order":100,"":{"order":100}}},"client-http":{"order":30,"v1":{"slug":"/docs/client-http/v1/","title":"HTTP API","description":"The reference for deepstream's HTTP API","leaf":true,"order":100,"":{"order":100}}}}}}}