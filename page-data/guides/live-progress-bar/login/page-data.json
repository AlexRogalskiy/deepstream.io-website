{"componentChunkName":"component---src-templates-guides-tsx","path":"/guides/live-progress-bar/login/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>Since we already have an express server running let’s just use it to add an authentication endpoint.</p>\n<h3 id=\"adding-a-http-authentication-endpoint\"><a href=\"#adding-a-http-authentication-endpoint\" aria-label=\"adding a http authentication endpoint permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a HTTP authentication endpoint</h3>\n<p>First thing we’ll need to do is add a HTTP endpoint that responds to a POST request with the correct structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The user unique id</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"uuid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// The data used by the server for permission purposes</span>\n  <span class=\"token property\">\"serverData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// The data returned to the user on a successful login</span>\n  <span class=\"token property\">\"clientData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So putting that into express as a post will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// A very basic token function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isValidToken</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> token <span class=\"token operator\">!==</span> <span class=\"token string\">'this-is-my-token'</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/realtime-login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidToken</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'the-only-authenticated-user'</span><span class=\"token punctuation\">,</span>\n    serverData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'admin'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    clientData<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"configuring-deepstream\"><a href=\"#configuring-deepstream\" aria-label=\"configuring deepstream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring deepstream</h3>\n<p>In order to use HTTP Authentication please enable the following auth module in your server config</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">auth</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># a post request will be send to this url on every incoming connection</span>\n      <span class=\"token key atrule\">endpointUrl</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>9090/realtime<span class=\"token punctuation\">-</span>login\n      <span class=\"token comment\"># any of these will be treated as access granted</span>\n      <span class=\"token key atrule\">permittedStatusCodes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">200 </span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\"># if the webhook didn't respond after this amount of milliseconds, the connection will be rejected</span>\n      <span class=\"token key atrule\">requestTimeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span>\n      <span class=\"token comment\"># the codes which the auth handler should retry. This is useful for when the API you depend on is </span>\n      <span class=\"token comment\"># flaky or going through a not so blue/green deployment</span>\n      <span class=\"token key atrule\">retryStatusCodes</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token number\">504 </span><span class=\"token punctuation\">]</span>\n      <span class=\"token comment\"># the maximum amount of retries before returning a false login</span>\n      <span class=\"token key atrule\">retryAttempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token comment\"># the time in milliseconds between retries</span>\n      <span class=\"token key atrule\">retryInterval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></code></pre></div>\n<h2 id=\"connecting-client-to-deepstream\"><a href=\"#connecting-client-to-deepstream\" aria-label=\"connecting client to deepstream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting client to deepstream</h2>\n<p>To ensure it works we need to connect the client to deepstream. To do so you simply just create a deepstream instance.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020/deepstream'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can then look at and monitor the deepstream connection status in order to see if your connected, useful to react to when the connection is ever lost.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Getting the connection state</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This will return AWAITING_AUTHENTICATION</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connectionStateChanged'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// newState will be OPEN when the connection has been correctly authenticated</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"logging-client-into-deepstream\"><a href=\"#logging-client-into-deepstream\" aria-label=\"logging client into deepstream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging client into deepstream</h2>\n<p>Great! You now have a connection to the server. The last thing to do is login. In order to do you so you can either use Promises, async/await or a login callback. For code readability I will be using async/await for all examples in this guide.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> clientData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">:</span> <span class=\"token string\">'this-is-my-token'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This will return OPEN</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"enabling-open-auth-for-anonymous-users\"><a href=\"#enabling-open-auth-for-anonymous-users\" aria-label=\"enabling open auth for anonymous users permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling open-auth for anonymous users</h2>\n<p>In this application we actually don’t actually care about the front-end permissions, since anyone can request a progress event. This is where multiple authentication providers can shine. By just adding an open authentication as the last (in this case second) authentication layer all users are accepted, but we’ll be able differently permission anonymous users to greatly limit their impact</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">auth</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">...</span>\n  <span class=\"token punctuation\">-</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> open</code></pre></div>\n<p>And to login in the browser just add:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">deepstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:6020/deepstream\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Since it's open we don't need pass anything in</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Logging in to deepstream","description":"Step three: How to login to the server using HTTP auth"},"fields":{"slug":"/guides/live-progress-bar/login/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/guides/live-progress-bar/25-login/index.md","weightedSlug":"/guides/live-progress-bar/25-login/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/guides/live-progress-bar/login/","navigation":{"order":100,"live-progress-bar":{"order":100,"intro":{"slug":"/guides/live-progress-bar/intro/","title":"Live Progress Bar","description":"Learn how to create a Live Progress Bar using deepstream","leaf":true,"order":0,"":{"order":100}},"prerequistes":{"slug":"/guides/live-progress-bar/prerequistes/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/live-progress-bar/setting-up-the-backend/","title":"Setting up the backend","description":"Step two: Starting the backend service","leaf":true,"order":20,"":{"order":100}},"login":{"slug":"/guides/live-progress-bar/login/","title":"Logging in to deepstream","description":"Step three: How to login to the server using HTTP auth","leaf":true,"order":25,"":{"order":100}},"server-events":{"slug":"/guides/live-progress-bar/server-events/","title":"Emitting events","description":"Step three: Emitting events as the post progresses","leaf":true,"order":30,"":{"order":100}},"visualizing-in-the-frontend":{"slug":"/guides/live-progress-bar/visualizing-in-the-frontend/","title":"Visualizing in the frontend","description":"Step three: Visualizing in the frontend","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/live-progress-bar/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/live-progress-bar/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"post-it-board":{"order":100,"intro":{"slug":"/guides/post-it-board/intro/","title":"Collaborative Post-It Board","description":"Creating a Retrospective Board with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/post-it-board/prerequisites/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/post-it-board/setting-up-the-backend/","title":"Setting up the postit backend","description":"Step two: Starting the postit services","leaf":true,"order":15,"":{"order":100}},"login":{"slug":"/guides/post-it-board/login/","title":"Logging in to your boards","description":"Step three: How to login to the server using storage auth","leaf":true,"order":20,"":{"order":100}},"the-postits":{"slug":"/guides/post-it-board/the-postits/","title":"Creating postits","description":"Step four: Creating a postit","leaf":true,"order":30,"":{"order":100}},"the-board":{"slug":"/guides/post-it-board/the-board/","title":"Grouping Post-Its Together","description":"Step five: Grouping Post-Its","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/post-it-board/permissions/","title":"Permissioning it all","description":"Step six: Adding some permissions","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/post-it-board/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"realtime-search":{"order":100,"intro":{"slug":"/guides/realtime-search/intro/","title":"Announcing new Realtime Search!","description":"Learn how to use realtime-search with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/realtime-search/prerequisites/","title":"Prerequisite","description":"What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/realtime-search/setting-up-the-backend/","title":"Setting up the backend","description":"Starting the backend services","leaf":true,"order":20,"":{"order":100}},"logging-in":{"slug":"/guides/realtime-search/logging-in/","title":"Logging in","description":"Logging into deepstream","leaf":true,"order":25,"":{"order":100}},"doing-a-realtime-search":{"slug":"/guides/realtime-search/doing-a-realtime-search/","title":"Realtime Search","description":"Doing a realtime search","leaf":true,"order":30,"":{"order":100}},"permissions":{"slug":"/guides/realtime-search/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/realtime-search/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":60,"":{"order":100}}}}}}}