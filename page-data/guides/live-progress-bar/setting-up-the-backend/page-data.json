{"componentChunkName":"component---src-templates-guides-tsx","path":"/guides/live-progress-bar/setting-up-the-backend/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p><div class=\"markdown-fragment\"><p>Before we start anything we will first get deepstream running locally on our machine. Deepstream doesn't require any custom code or logic to reside on the server in order to provide the functionality we cover in all the guides here, and that isn't purely out of laziness! The goal when using deepstream (or any microservice architecture) is to be able to deploy effectively with no downtime and scale individual services independently. Tying logic into the server defeats that purpose, makes it harder to test and is a pattern we will try to avoid when possible.</p>\n<h3>Running from the binary</h3>\n<p>The quickest way to run deepstream (if you don't have docker installed) is to download the latest release from github <a href=\"https://github.com/deepstreamIO/deepstream.io/releases\">here</a>, unzip it and run it via your command line terminal or double clicking on it in windows.</p>\n<pre><code class=\"language-bash\"># On mac / linux machines\n./deepstream\n\n# On windows\n./deepstream.exe\n</code></pre>\n<p>And that's it, as long as the output says that it started correctly your ready to start developing against it.</p>\n<pre><code class=\"language-bash\">INFO | Deepstream started\n</code></pre>\n<h3>Running via docker</h3>\n<p>Running any service via docker is my personal favorite way, since upgrading, tags, running with different services and deploying it on your production or CI machines are all the same. Provided you have docker installed you can run deepstream doing the following:</p>\n<pre><code class=\"language-bash\">docker run \\\n    -p 6020:6020 \\\n    deepstreamio/deepstream.io:latest-alpine\n</code></pre>\n<p>Keep in mind we'll also need to be modifying the config file. The most effective way of doing this is by mounting a directory with deepstream config when running the docker image</p>\n<pre><code class=\"language-bash\">docker run \\\n    -p 6020:6020 \\\n    -v /conf:/etc/conf/deepstream\n    deepstreamio/deepstream.io:latest-alpine\n</code></pre>\n<h3>Running via node</h3>\n<p>For those who want to embed deepstream into a larger process, for example sharing your HTTP service across your own application logic (useful for running express and deepstream on the same port), using custom plugins, bundling it into your own binary (for those who are a bit more hardcore) or any other reason this is the way to go. Deepstream is written in Typescript which makes developing against it a breeze.</p>\n<p>To run deepstream via node you need to do the following:</p>\n<ol>\n<li>Install via node / yarn</li>\n</ol>\n<pre><code class=\"language-bash\">npm install deepstream.io --save-production\n</code></pre>\n<ol start=\"2\">\n<li>Import it into your codebase</li>\n</ol>\n<pre><code class=\"language-js\">import { Deepstream } from 'deepstream.io'\n</code></pre>\n<ol start=\"3\">\n<li>Configure it, either by</li>\n</ol>\n<p>..1. Using a config.yml file (living in a directory called conf)</p>\n<pre><code class=\"language-js\">const deepstream = new Deepstream()\n</code></pre>\n<p>..2. Using the default config that gets shipped with deepstream (for quick start setups):</p>\n<pre><code class=\"language-js\">const deepstream = new Deepstream(null)\n</code></pre>\n<p>..3. Using custom config</p>\n<pre><code class=\"language-js\">const deepstream = new Deepstream({\n    auth: [{\n        path: './src/authentication/custom-authentication-plugin.js'.\n        options: {\n        }\n    }]\n})\n</code></pre>\n<p>..4. Or for those who really know what they doing, overriding services entirely:</p>\n<pre><code class=\"language-js\">const deepstream = new Deepstream(null)\ndeepstream.set('auth', new CustomAuthenticationPlugin())\ndeepstream.start()\n</code></pre>\n</div></p>","frontmatter":{"title":"Setting up the backend","description":"Step two: Starting the backend service"},"fields":{"slug":"/guides/live-progress-bar/setting-up-the-backend/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/guides/live-progress-bar/20-setting-up-the-backend/index.md","weightedSlug":"/guides/live-progress-bar/20-setting-up-the-backend/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/guides/live-progress-bar/setting-up-the-backend/","navigation":{"order":100,"live-progress-bar":{"order":100,"intro":{"slug":"/guides/live-progress-bar/intro/","title":"Live Progress Bar","description":"Learn how to create a Live Progress Bar using deepstream","leaf":true,"order":0,"":{"order":100}},"prerequistes":{"slug":"/guides/live-progress-bar/prerequistes/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/live-progress-bar/setting-up-the-backend/","title":"Setting up the backend","description":"Step two: Starting the backend service","leaf":true,"order":20,"":{"order":100}},"login":{"slug":"/guides/live-progress-bar/login/","title":"Logging in to deepstream","description":"Step three: How to login to the server using HTTP auth","leaf":true,"order":25,"":{"order":100}},"server-events":{"slug":"/guides/live-progress-bar/server-events/","title":"Emitting events","description":"Step three: Emitting events as the post progresses","leaf":true,"order":30,"":{"order":100}},"visualizing-in-the-frontend":{"slug":"/guides/live-progress-bar/visualizing-in-the-frontend/","title":"Visualizing in the frontend","description":"Step three: Visualizing in the frontend","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/live-progress-bar/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/live-progress-bar/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"post-it-board":{"order":100,"intro":{"slug":"/guides/post-it-board/intro/","title":"Collaborative Post-It Board","description":"Creating a Retrospective Board with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/post-it-board/prerequisites/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/post-it-board/setting-up-the-backend/","title":"Setting up the postit backend","description":"Step two: Starting the postit services","leaf":true,"order":15,"":{"order":100}},"login":{"slug":"/guides/post-it-board/login/","title":"Logging in to your boards","description":"Step three: How to login to the server using storage auth","leaf":true,"order":20,"":{"order":100}},"the-postits":{"slug":"/guides/post-it-board/the-postits/","title":"Creating postits","description":"Step four: Creating a postit","leaf":true,"order":30,"":{"order":100}},"the-board":{"slug":"/guides/post-it-board/the-board/","title":"Grouping Post-Its Together","description":"Step five: Grouping Post-Its","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/post-it-board/permissions/","title":"Permissioning it all","description":"Step six: Adding some permissions","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/post-it-board/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"realtime-search":{"order":100,"intro":{"slug":"/guides/realtime-search/intro/","title":"Announcing new Realtime Search!","description":"Learn how to use realtime-search with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/realtime-search/prerequisites/","title":"Prerequisite","description":"What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/realtime-search/setting-up-the-backend/","title":"Setting up the backend","description":"Starting the backend services","leaf":true,"order":20,"":{"order":100}},"logging-in":{"slug":"/guides/realtime-search/logging-in/","title":"Logging in","description":"Logging into deepstream","leaf":true,"order":25,"":{"order":100}},"doing-a-realtime-search":{"slug":"/guides/realtime-search/doing-a-realtime-search/","title":"Realtime Search","description":"Doing a realtime search","leaf":true,"order":30,"":{"order":100}},"permissions":{"slug":"/guides/realtime-search/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/realtime-search/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":60,"":{"order":100}}}}}}}