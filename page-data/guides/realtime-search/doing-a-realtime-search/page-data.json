{"componentChunkName":"component---src-templates-guides-tsx","path":"/guides/realtime-search/doing-a-realtime-search/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>So now we get to the juicier part. Realtime Search works using a combination of the same basic deepstream record or lists APIs, so we don’t really need to learn anything new!</p>\n<p>The first thing you need to do is make an RPC in order to notify the backend of the query you want to perform. This step isn’t entirely necessary as we could just put the query inside of the record or events name, however it provides two important aspects:</p>\n<ul>\n<li>permissions</li>\n</ul>\n<p>You can easily permission an RPC using valve as we will see later. This makes it much more secure as we don’t need to parse it and can also add meta data into the RPC to strengthen it further</p>\n<ul>\n<li>Size</li>\n</ul>\n<p>If you have complex query odds are it’s quite long. Normally you want to keep topics as short as possible as they are heavily used, and in some cases long names are not even supported by dbs (like rethinkdb)</p>\n<p>If you used the previous realtime-search provider with rethinkdb this will be the only thing you need to change to upgrade</p>\n<h3 id=\"making-an-rpc\"><a href=\"#making-an-rpc\" aria-label=\"making an rpc permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making an RPC</h3>\n<p>So the first thing we need to do is make the actual query, in this example we will have one that filters down\neveryone in the user table with an age greater than 30 </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * In order to do the search we call an RPC with the table and query parameters\n * The query parameters are tuples of three:\n * \n * [fieldName, operator, value]\n * \n * Where the operators can be one of:\n * \n * [ eq, ne, match, gt, ge, lt, le, in, contains ]\n * \n * And you can AND them together by just having more:\n * \n * [[fieldName, operator, value], [fieldName, operator, value], [fieldName, operator, value]]\n */</span>\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime_search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    table<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// age greater than equal to 30</span>\n    query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ge'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"request-the-list\"><a href=\"#request-the-list\" aria-label=\"request the list permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request the list</h3>\n<p>The next thing we need to do is request that hash and just to it updating. The simplest way to do this is:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> resultList <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">realtime_search/list_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresultList<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However you’ll notice the results are actually just record names like <code class=\"language-text\">user/uuid</code> rather than the data itself. This is because we use lists and hence realtime-search returns references to objects, but require the front-end to have to subscribe the individual records. This might sound sound like boiler plate but each application can request data differently depending on their goals. In this guide we’ll concentrate on the most common approach of creating a record we can subscribe to it with the correct lifecycle hooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> records <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createRecord</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">discardRecord</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> records<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n    record<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> resultList <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">realtime_search/list_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> resultList<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresultList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>createRecord<span class=\"token punctuation\">)</span>\nresultList<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entry-added'</span><span class=\"token punctuation\">,</span> createRecord<span class=\"token punctuation\">)</span>\nresultList<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'entry-removed'</span><span class=\"token punctuation\">,</span> discardRecord<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"rendering\"><a href=\"#rendering\" aria-label=\"rendering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering</h3>\n<p>Given the simplicity of this app and the lack of framework use I’m going to take the more unconventional route of just rerendering the list whenever it or the data within it changes</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span>\n    users<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'users'</span>\n\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#user-template\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> elem <span class=\"token operator\">=</span> clone<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        elem<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.name span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n        elem<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.age span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n        users<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    document\n        <span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".users\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createRecord</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Render whenever something changes and on initial load</span>\n    record<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>render<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">discardRecord</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> records<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n    record<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    records<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Render whenever it has been discarded</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"setting-it-change\"><a href=\"#setting-it-change\" aria-label=\"setting it change permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting it change</h3>\n<p>So the best way to make sure this all works is just to do a HTTP post to make sure everything updates properly! The following snippets should be added into files (like upsert-user.sh) as it will make like easier when doing multiple operations. Or just use the ones within the example directory of the <a href=\"https://github.com/deepstreamIO/deepstream.io-realtime-search/tree/master/example\">realtime-search github repo</a>.</p>\n<ul>\n<li>When adding/insert a new entry</li>\n</ul>\n<p><div class=\"gatsby-highlight\">\n        <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -z <span class=\"token variable\">$3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Must provide record name, name and age\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token function\">curl</span> -X POST -H <span class=\"token string\">\"Content-Type: application/json\"</span> -d <span class=\"token string\">\"{\n  <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>body<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: [\n    {\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>topic<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>record<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>action<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>write<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>recordName<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$1</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>data<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: {\n            <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>name<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$2</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n            <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>age<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token variable\">$3</span>\n        }\n    }\n  ]\n}\n\"</span> <span class=\"token string\">\"localhost:6020/api/\"</span></code></pre>\n        </div></p>\n<ul>\n<li>Deleting a user</li>\n</ul>\n<p><div class=\"gatsby-highlight\">\n        <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> \n\n<span class=\"token function\">curl</span> -X POST -H <span class=\"token string\">\"Content-Type: application/json\"</span> -d <span class=\"token string\">\"{\n  <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>body<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: [\n    {\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>topic<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>record<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>action<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>delete<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,\n        <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>recordName<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>: <span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token variable\">$1</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>\n    }\n  ]\n}\n\"</span> <span class=\"token string\">\"localhost:6020/api/\"</span></code></pre>\n        </div></p>","frontmatter":{"title":"Realtime Search","description":"Doing a realtime search"},"fields":{"slug":"/guides/realtime-search/doing-a-realtime-search/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/guides/realtime-search/30-doing-a-realtime-search/index.md","weightedSlug":"/guides/realtime-search/30-doing-a-realtime-search/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/guides/realtime-search/doing-a-realtime-search/","navigation":{"order":100,"live-progress-bar":{"order":100,"intro":{"slug":"/guides/live-progress-bar/intro/","title":"Live Progress Bar","description":"Learn how to create a Live Progress Bar using deepstream","leaf":true,"order":0,"":{"order":100}},"prerequistes":{"slug":"/guides/live-progress-bar/prerequistes/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/live-progress-bar/setting-up-the-backend/","title":"Setting up the backend","description":"Step two: Starting the backend service","leaf":true,"order":20,"":{"order":100}},"login":{"slug":"/guides/live-progress-bar/login/","title":"Logging in to deepstream","description":"Step three: How to login to the server using HTTP auth","leaf":true,"order":25,"":{"order":100}},"server-events":{"slug":"/guides/live-progress-bar/server-events/","title":"Emitting events","description":"Step three: Emitting events as the post progresses","leaf":true,"order":30,"":{"order":100}},"visualizing-in-the-frontend":{"slug":"/guides/live-progress-bar/visualizing-in-the-frontend/","title":"Visualizing in the frontend","description":"Step three: Visualizing in the frontend","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/live-progress-bar/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/live-progress-bar/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"post-it-board":{"order":100,"intro":{"slug":"/guides/post-it-board/intro/","title":"Collaborative Post-It Board","description":"Creating a Retrospective Board with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/post-it-board/prerequisites/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/post-it-board/setting-up-the-backend/","title":"Setting up the postit backend","description":"Step two: Starting the postit services","leaf":true,"order":15,"":{"order":100}},"login":{"slug":"/guides/post-it-board/login/","title":"Logging in to your boards","description":"Step three: How to login to the server using storage auth","leaf":true,"order":20,"":{"order":100}},"the-postits":{"slug":"/guides/post-it-board/the-postits/","title":"Creating postits","description":"Step four: Creating a postit","leaf":true,"order":30,"":{"order":100}},"the-board":{"slug":"/guides/post-it-board/the-board/","title":"Grouping Post-Its Together","description":"Step five: Grouping Post-Its","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/post-it-board/permissions/","title":"Permissioning it all","description":"Step six: Adding some permissions","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/post-it-board/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"realtime-search":{"order":100,"intro":{"slug":"/guides/realtime-search/intro/","title":"Announcing new Realtime Search!","description":"Learn how to use realtime-search with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/realtime-search/prerequisites/","title":"Prerequisite","description":"What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/realtime-search/setting-up-the-backend/","title":"Setting up the backend","description":"Starting the backend services","leaf":true,"order":20,"":{"order":100}},"logging-in":{"slug":"/guides/realtime-search/logging-in/","title":"Logging in","description":"Logging into deepstream","leaf":true,"order":25,"":{"order":100}},"doing-a-realtime-search":{"slug":"/guides/realtime-search/doing-a-realtime-search/","title":"Realtime Search","description":"Doing a realtime search","leaf":true,"order":30,"":{"order":100}},"permissions":{"slug":"/guides/realtime-search/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/realtime-search/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":60,"":{"order":100}}}}}}}