{"componentChunkName":"component---src-templates-guides-tsx","path":"/guides/post-it-board/permissions/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>So our app is now up and running, but before you can go and deploy this for the world you probably want to first add some permissions to stop people directly manipulating your data in an invalid way.</p>\n<p>The permissions we want to add are:</p>\n<ul>\n<li>Only allow users to edit their own postits</li>\n<li>Only allow users to add postits</li>\n<li>Only allow an admin user to delete postits</li>\n</ul>\n<p>In order to this we will be using a powerful permission language called Valve. This allows us to create rules that can validate every message that comes from a client before it effects any state at all on the server.</p>\n<p>In order to permission the data we’ll need to have access to the users id and role. The will be required in order to solve our applications requirements. In order to do </p>\n<h3 id=\"only-allow-users-to-edit-their-own-postits\"><a href=\"#only-allow-users-to-edit-their-own-postits\" aria-label=\"only allow users to edit their own postits permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Only allow users to edit their own postits</h3>\n<p>Comparing the users id with an id in the payload or the actual record name is the perfect way to guarantee only the specific user can edit their own postit</p>\n<p>You can access the id on a user simply by referencing the <code class=\"language-text\">user.id</code> property. The userid here is the one that is returned by the storage adaptor we setup earlier </p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">record</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">\"postits/.*\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">write</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"data.owner === user.id\"</span></code></pre></div>\n<p>Or if you you want to be a bit more specific, you could instead allow any user to move cards around but just not\nedit the content. This can be done by loading up the previous content up and doing a comparison.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">record</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">\"postits/.*\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">write</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"data.owner === user.id || (_(name).content === data.content &amp;&amp; _(name).owner === data.owner)\"</span></code></pre></div>\n<p>And that’s it. The users who can edit cards have to be the same as the cards’ creators.</p>","frontmatter":{"title":"Permissioning it all","description":"Step six: Adding some permissions"},"fields":{"slug":"/guides/post-it-board/permissions/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/guides/post-it-board/50-permissions/index.md","weightedSlug":"/guides/post-it-board/50-permissions/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/guides/post-it-board/permissions/","navigation":{"order":100,"live-progress-bar":{"order":100,"intro":{"slug":"/guides/live-progress-bar/intro/","title":"Live Progress Bar","description":"Learn how to create a Live Progress Bar using deepstream","leaf":true,"order":0,"":{"order":100}},"prerequistes":{"slug":"/guides/live-progress-bar/prerequistes/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/live-progress-bar/setting-up-the-backend/","title":"Setting up the backend","description":"Step two: Starting the backend service","leaf":true,"order":20,"":{"order":100}},"login":{"slug":"/guides/live-progress-bar/login/","title":"Logging in to deepstream","description":"Step three: How to login to the server using HTTP auth","leaf":true,"order":25,"":{"order":100}},"server-events":{"slug":"/guides/live-progress-bar/server-events/","title":"Emitting events","description":"Step three: Emitting events as the post progresses","leaf":true,"order":30,"":{"order":100}},"visualizing-in-the-frontend":{"slug":"/guides/live-progress-bar/visualizing-in-the-frontend/","title":"Visualizing in the frontend","description":"Step three: Visualizing in the frontend","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/live-progress-bar/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/live-progress-bar/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"post-it-board":{"order":100,"intro":{"slug":"/guides/post-it-board/intro/","title":"Collaborative Post-It Board","description":"Creating a Retrospective Board with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/post-it-board/prerequisites/","title":"Prerequisite","description":"Step one: What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/post-it-board/setting-up-the-backend/","title":"Setting up the postit backend","description":"Step two: Starting the postit services","leaf":true,"order":15,"":{"order":100}},"login":{"slug":"/guides/post-it-board/login/","title":"Logging in to your boards","description":"Step three: How to login to the server using storage auth","leaf":true,"order":20,"":{"order":100}},"the-postits":{"slug":"/guides/post-it-board/the-postits/","title":"Creating postits","description":"Step four: Creating a postit","leaf":true,"order":30,"":{"order":100}},"the-board":{"slug":"/guides/post-it-board/the-board/","title":"Grouping Post-Its Together","description":"Step five: Grouping Post-Its","leaf":true,"order":40,"":{"order":100}},"permissions":{"slug":"/guides/post-it-board/permissions/","title":"Permissioning it all","description":"Step six: Adding some permissions","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/post-it-board/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":90,"":{"order":100}}},"realtime-search":{"order":100,"intro":{"slug":"/guides/realtime-search/intro/","title":"Announcing new Realtime Search!","description":"Learn how to use realtime-search with deepstream","leaf":true,"order":0,"":{"order":100}},"prerequisites":{"slug":"/guides/realtime-search/prerequisites/","title":"Prerequisite","description":"What you need to know before starting this guide","leaf":true,"order":10,"":{"order":100}},"setting-up-the-backend":{"slug":"/guides/realtime-search/setting-up-the-backend/","title":"Setting up the backend","description":"Starting the backend services","leaf":true,"order":20,"":{"order":100}},"logging-in":{"slug":"/guides/realtime-search/logging-in/","title":"Logging in","description":"Logging into deepstream","leaf":true,"order":25,"":{"order":100}},"doing-a-realtime-search":{"slug":"/guides/realtime-search/doing-a-realtime-search/","title":"Realtime Search","description":"Doing a realtime search","leaf":true,"order":30,"":{"order":100}},"permissions":{"slug":"/guides/realtime-search/permissions/","title":"Permissions","description":"Step three: Restricting who can emit events","leaf":true,"order":50,"":{"order":100}},"conclusion":{"slug":"/guides/realtime-search/conclusion/","title":"Summary and extra tasks","description":"Step seven: Conclusion","leaf":true,"order":60,"":{"order":100}}}}}}}