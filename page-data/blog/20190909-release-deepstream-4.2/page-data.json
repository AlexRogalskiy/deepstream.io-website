{"componentChunkName":"component---src-templates-blog-tsx","path":"/blog/20190909-release-deepstream-4.2/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>Two new connection endpoints have been added. They are currently experimental and will be properly\nannounced with associated documentation as part of the epic of updating all deepstream documentation.</p>\n<p>The first endpoint is mqtt! This allows us to support mqtt auth (using username and password), retain using records and QoS 1 using write acks. The only issue is since mqtt only supports one sort\nof concept (with flags distinguishing them) we bridge both events and records together. That means if you subscribe to ‘weather/london’, you’ll get the update from both a client doing <code class=\"language-text\">event.emit(&#39;weather/london&#39;)</code> and <code class=\"language-text\">record.setData(&#39;weather/london&#39;)</code>.</p>\n<p>So for example, using the following nodeJS mqtt code we can get any mqtt device to be controlled by a\nbrowser client (not that this is totally useful!):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mqtt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> client  <span class=\"token operator\">=</span> mqtt<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt://localhost:1883'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// all this data will get forwarded to the HTTP webhook for normal</span>\n  <span class=\"token comment\">// deepstream authentication and permission workflows</span>\n  username<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-device-name'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-device-password'</span><span class=\"token punctuation\">,</span>\n  properties<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    authenticationMethod<span class=\"token punctuation\">:</span> <span class=\"token string\">'a-custom-authentication-method'</span><span class=\"token punctuation\">,</span>\n    authenticationData<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> property<span class=\"token punctuation\">:</span> <span class=\"token string\">\"another value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Lets add a kill switch for fun</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start/weather/london'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'subscribed to the kill switch'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Lets add a kill switch for fun</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop/weather/london'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'subscribed to the kill switch'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">let</span> publishInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">topic<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topic <span class=\"token operator\">===</span> <span class=\"token string\">'stop-publishing'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>publishInterval<span class=\"token punctuation\">)</span>\n        publishInterval <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>topic <span class=\"token operator\">===</span> <span class=\"token string\">'start-publishing'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>publishInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        publishInterval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            client<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'weather/london'</span><span class=\"token punctuation\">,</span> \n                <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  temperature<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                <span class=\"token punctuation\">{</span> \n                    <span class=\"token comment\">// This tells deepstream it's a record, which will save it in the database</span>\n                    retain<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> \n                    <span class=\"token comment\">// This tells deepstream it's a write ack, so will get a confirmation</span>\n                    qos<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> \n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n                console<span class=\"token punctuation\">.</span>log\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can listen in on the events using a normal deepstream client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DeepstreamClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@deepstream/client'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost:6020'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-username'</span><span class=\"token punctuation\">,</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">'my-user-password'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This example assumes the mqtt client is already logged in and subscribed</span>\nclient<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start/weather/london'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> room <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'weather/london'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> room<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nroom<span class=\"token punctuation\">.</span><span class=\"token function\">susbcribe</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    client<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stop/weather/london'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The second endpoint is <code class=\"language-text\">ws-json</code> which allows users to interact with deepstream by just passing through json serialized text blobs instead of protobuf. This is mainly to help a few people trying to write SDKs without the hassle of a protobuf layer.</p>\n<p>A small hidden feature, Valve also injects a <code class=\"language-text\">name</code> variable which allows you to reference the name your currently in. Useful for cross referencing a record and pulling out the variable from the topic at the same time.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">record</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'$modelName/$id'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">read</span><span class=\"token punctuation\">:</span> _(name).owner === $id</code></pre></div>\n<h3 id=\"fix\"><a href=\"#fix\" aria-label=\"fix permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fix</h3>\n<p>Subscription registry seemed to have a massive leak when it came to dead sockets! This has now been fixed. The sockets seemed to have gotten the remove event deleted earlier in their lifecycle which prohibited it from doing a proper clean up later. </p>","frontmatter":{"title":"Release: Deepstream 4.2","description":"MQTT AND JSON Protocol support!"},"fields":{"slug":"/blog/20190909-release-deepstream-4.2/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/blog/20190909-release-deepstream-4.2/index.md","weightedSlug":"/blog/20190909-release-deepstream-4.2/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/20190909-release-deepstream-4.2/","navigation":{"order":100,"release-deepstream-2.3":{"slug":"/blog/20170509-release-deepstream-2.3/","title":"Release: Deepstream 2.3","description":"Announcing the 2.3 release of deepstream.io and all the associated goodies","leaf":true,"order":20170509,"":{"order":100}},"release-deepstream-2.4":{"slug":"/blog/20170702-release-deepstream-2.4/","title":"Release: Deepstream 2.4","description":"Announcing the 2.4 release of deepstream.io","leaf":true,"order":20170702,"":{"order":100}},"release-deepstream-3.0":{"slug":"/blog/20170721-release-deepstream-3.0/","title":"Release: Deepstream 3.0","description":"a foundation for a multi-protocol-server","leaf":true,"order":20170721,"":{"order":100}},"release-clientjs-4.0":{"slug":"/blog/20190730-release-clientjs-4.0/","title":"Release: Javascript/Node 4.0","description":"The newly improved Typescript and ES6 SDK","leaf":true,"order":20190730,"":{"order":100}},"release-deepstream-4.1":{"slug":"/blog/20190830-release-deepstream-4.1/","title":"Release: Deepstream 4.1","description":"Deepstream V3 and below compatibility support!","leaf":true,"order":20190830,"":{"order":100}},"release-clientjs-4.1":{"slug":"/blog/20190905-release-clientjs-4.1/","title":"Release: Javascript/Node 4.1","description":"Default Timer Implementation","leaf":true,"order":20190905,"":{"order":100}},"release-deepstream-4.2":{"slug":"/blog/20190909-release-deepstream-4.2/","title":"Release: Deepstream 4.2","description":"MQTT AND JSON Protocol support!","leaf":true,"order":20190909,"":{"order":100}},"release-clientjs-5.0":{"slug":"/blog/20190920-release-clientjs-5.0/","title":"Release: Javascript/Node 5.0","description":"Better Typescript and MIT","leaf":true,"order":20190920,"":{"order":100}},"release-deepstream-5.0":{"slug":"/blog/20190920-release-deepstream-5.0/","title":"Release: Deepstream 5.0","description":"The MIT Resurrection","leaf":true,"order":20190920,"":{"order":100}},"realtime-search":{"slug":"/blog/20191104-realtime-search/","title":"Realtime Search","description":"The Realtime Search Evolution","leaf":true,"order":20191104,"":{"order":100}},"release-deepstream-4.0":{"slug":"/blog/20190730-release-deepstream-4.0/","title":"Release: Deepstream 4.0","description":"The massively upgraded deepstream server! Introducing too many changes to be contained within a description!","leaf":true,"order":20190730,"":{"order":100}}}}}}