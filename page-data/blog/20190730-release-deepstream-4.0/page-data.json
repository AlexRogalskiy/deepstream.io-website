{"componentChunkName":"component---src-templates-blog-tsx","path":"/blog/20190730-release-deepstream-4.0/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<h3 id=\"features\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features:</h3>\n<ul>\n<li>New protobuf protocol support (under the hood)</li>\n<li>Bulk actions instead of individual subscribes (under the hood)</li>\n<li>Official Plugin Support</li>\n<li>Monitoring Support</li>\n<li>Clustering Support (with small caveats)</li>\n<li>Listening Discovery Simplification</li>\n<li>V2 storage API</li>\n<li>V2 cache API</li>\n<li>Notify API</li>\n</ul>\n<h3 id=\"improvements\"><a href=\"#improvements\" aria-label=\"improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improvements</h3>\n<ul>\n<li>Lazy data parsing</li>\n<li>Improved deepstream lifecycle</li>\n<li>Upgraded development tools</li>\n<li>New deepstream.io website</li>\n</ul>\n<h3 id=\"backwards-compatibility\"><a href=\"#backwards-compatibility\" aria-label=\"backwards compatibility permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backwards compatibility</h3>\n<ul>\n<li>All V3 SDKs no longer compatible due to protobuf binary protocol</li>\n</ul>\n<h3 id=\"upgrade-guide\"><a href=\"#upgrade-guide\" aria-label=\"upgrade guide permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Upgrade guide</h3>\n<p>You can see the upgrade guide for backwards compatibility <a href=\"/tutorials/upgrade-guides/v4/server/\">here</a></p>\n<h2 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TLDR:</h2>\n<h2 id=\"unsupported-sdks\"><a href=\"#unsupported-sdks\" aria-label=\"unsupported sdks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unsupported SDKs</h2>\n<p>I wanted to leave this part till the end, but it’s the biggest loss with upgrading to V4 and will be an instant blocker for some users.</p>\n<p>We are sad to say that we haven’t yet migrated the V3 non browser and node SDKs to V4. The reason is that underlying protocol has changed and the way SDKs were written in V3 constructed and parsed string messages all over the code base. This design has unfortunately meant that while we could write a binary to text parser in the Java SDK it would just make it maintenance hell.</p>\n<p>Our Swift SDK has been ambitious from the start, using J2OBJC in order to convert the java code to Objective C with thick polyfills for java methods. While this approach has generally worked, it is really hard to maintain and build.</p>\n<p>Our goal going forward is to write a single Kotlin SDK that can run on both iOS and Java. We would also have it run a much more minimal set of functionality, allowing the SDK to only consume strings rather than objects. This would allow us to integrate easily with many of the different flavours of JSON libraries out there.</p>\n<p>Because we used Protobuf, however, the good news is we can easily create protocol objects using a generator, which means we can immediately focus on SDKs and less\nso on lower level binary parsing!</p>\n<h2 id=\"this-website\"><a href=\"#this-website\" aria-label=\"this website permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>This website</h2>\n<p>There has been a lot of feedback on the differences between our deepstreamHub and deepstream documentation and offerings, where some users were not certain where the line was drawn between open source and enterprise. We also have over a hundred pages of documentation in a world where some of yesterday’s hot trends (For example Knockout, AngularJS) have been replaced by others (React, Vue). And even within the one library, approaches have been deprecated, replaced or advised against (React mixins, stateful components, and hooks). While we love keeping up to date with all the latest chatter in DevOps and developer land, it’s pretty much impossible to do so while also focusing on integrating important features into deepstream’s core. As such, I’m happy to say we have migrated all of our OS documentation and website back to opensource using the amazing <a href=\"\">Gatsby</a> framework. Every page can now be edited by the community, and adding pages is as easy as writing a markdown document, adding some images and letting the build take care of the rest. If you would like to do anything fancy, you are more than welcome to add a React component! It’s worth noting that while all content has been migrated across the css can and will still need an insane amount of ❤️ since that was ported and not rewritten from the original website.</p>\n<h2 id=\"binary-protocol\"><a href=\"#binary-protocol\" aria-label=\"binary protocol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Protocol</h2>\n<p><div class=\"markdown-fragment\"><h2>Binary Protocol</h2>\n<p>The driver behind pretty much all of the V4 refactor was our move from our old text based protocol to binary. It makes building SDKs and new features so much easier. Seriously. LIKE SO MUCH EASIER.</p>\n<p>Okay so first things first, the structure of text vs binary messages:</p>\n<h3>V3 -Text:</h3>\n<p><code>TOPIC | ACTION | meta1 | meta2 | ...metaN | payload +</code></p>\n<p>This string had the initial TOPIC and ACTION read by the parser to find out where to route it, and the rest of the data was figured out within the code module that dealt with it. This gave some benefits like only parsing a full message once its actually required, but also meant that the message parsing code was distibuted and adding for example a meta field would require lots of refactoring. Tests also had to create text based messages even when testing internal code paths. Payload serialization also didn't use JSON, but instead used a custom form of serialization to minimize bandwidth: U for undefined, <em>T</em> for true, <em>F</em> for false, <em>O</em> for object, <em>S</em> prefix for string and a <em>N</em> prefix for number.</p>\n<p>So the message object in V3 SDKs and server were like:</p>\n<pre><code class=\"language-json\">{\n    \"topic\": \"R\",\n    \"action\": \"S\",\n    \"data\": [\"A\", \"recordName\"]\n}\n</code></pre>\n<h3>V4 - Binary:</h3>\n<p>The binary protocol is implemented using protobuf. The decision to use proto was due to its wide support of other languages, it's ease of formats and how quickly we managed to get it implemented.</p>\n<p>The main message is simply this:</p>\n<pre><code class=\"language-proto\">message Message {\n  TOPIC topic = 2;\n  bytes message = 3;\n}\n</code></pre>\n<p>While individual messages use a combination of an action enum and fields.</p>\n<p>For example, the event message looks something like this:</p>\n<pre><code class=\"language-proto\">message EventMessage {\n    required EVENT_ACTION action = 1;\n    string data = 2;\n    string correlationId = 3;\n    bool isError = 4;\n    bool isAck = 5;\n    string name = 6;\n\n    repeated string names = 7;\n    string subscription = 8;\n\n    TOPIC originalTOPIC = 10;\n    EVENT_ACTION originalAction = 11;\n}\n</code></pre>\n<p>An example representation that deepstream would get translated within the JS SDKs looks like this:</p>\n<pre><code class=\"language-javascript\">{\n    \"topic\": 3,\n    \"action\": 2,\n    \"isAck\": true,\n    \"name\": \"event\"\n}\n</code></pre>\n<p>This makes writing code alot easier. At the time of writing the full message API that can be consumed is as follows:</p>\n<pre><code class=\"language-typescript\">export interface Message {\n    topic: TOPIC\n    action: ALL_ACTIONS\n    name?: string\n\n    isError?: boolean\n    isAck?: boolean\n\n    data?: string | Buffer\n    parsedData?: RecordData | RPCResult | EventData | AuthData\n\n    parseError?: false\n\n    // listen\n    subscription?: string\n\n    originalTopic?: TOPIC | STATE_REGISTRY_TOPIC\n    originalAction?: ALL_ACTIONS\n    names?: Array&#x3C;string>\n    reason?: string\n\n    // connection\n    url?: string\n    protocolVersion?: string\n\n    // record\n    isWriteAck?: boolean\n    correlationId?: string\n    path?: string\n    version?: number\n    versions?: { [index: string]: number }\n\n    // state\n    checksum?: number\n    fullState?: Array&#x3C;string>\n    serverName?: string\n    registryTopic?: TOPIC\n\n    // cluster\n    leaderScore?: number\n    externalUrl?: string,\n    role?: string\n\n    // lock\n    locked?: boolean\n}\n</code></pre>\n<p>Using this approach has made adding new features and maintaining current ones significantly easier. And the given combination of TOPICs and ACTIONs we can pretty much ensure we'll be able to extend it without running out of space any time soon.</p>\n<h3>Cons</h3>\n<p>It wouldn't be fair to say that this overhaul has no downsides. There have been some sacrifices that we had to make along the way.</p>\n<p>1) If you count messages in the billions, those extra bytes add up. Data bandwidth is quite expensive on cloud systems so lack of compression isn't just a latency issue anymore. Protobuf has some very good compression algorithms which defeats JSON objects in most cases.</p>\n<h3>Why yet another proprietary standard?</h3>\n<p>Because deepstream offers some very specific features, and has alot more on the way. For example we currently have a unique concept such as listening. Trying to use a realtime standard (which there aren't many of) would seriously hinder development. That being said deepstream allows swapping out of protocols quite easily as long as theres an interop layer so feel free to create compatibility protocols to work with your favourite SDKs!</p>\n</div></p>\n<h2 id=\"typescript\"><a href=\"#typescript\" aria-label=\"typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typescript</h2>\n<p>We converted the majority of the codebase to typescript, for the benefit of future code maintenance as well making it easier for people to contribute.</p>\n<p>This also means that we now have declarations for all possible plugin interfaces which should make it much easier for people to write their own, once they fork the V4 plugin template.</p>\n<p>Current custom external plugins are:</p>\n<ul>\n<li>Authentication</li>\n<li>Permissioning</li>\n<li>Storage and Cache</li>\n<li>Logger</li>\n<li>Connection Endpoints</li>\n<li>State Registry Factory</li>\n<li>Subscription Registry Factory</li>\n<li>Monitoring</li>\n<li>Generic Plugins</li>\n</ul>\n<p>All these plugins need to extend or implement the same plugin interface (via the @deepstream/types package)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeepstreamPlugin</span><span class=\"token operator\">&lt;</span>PluginConfig<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">constructor</span> <span class=\"token punctuation\">(</span>pluginConfig<span class=\"token punctuation\">:</span> PluginConfig<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">:</span> DeepstreamServices<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">:</span> DeepstreamConfig<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> init<span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">whenReady</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">close</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">setConnectionListener</span> <span class=\"token punctuation\">(</span>connectionListener<span class=\"token punctuation\">:</span> ConnectionListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Improvements to the startup lifecyle also means that deepstream now launches everything in the following order:</p>\n<ol>\n<li>Logger</li>\n<li>Services</li>\n<li>Handlers</li>\n<li>Plugins</li>\n<li>Connection Endpoints</li>\n</ol>\n<p>This means by the time your custom plugins are initialized, Deepstream has all the services started. The reason why this isn’t the last lifecyle before running is because once the server is stopped you would usually want to drain all the connections before stopping your own custom logic. If you need to access the connection-endpoint directly please raise an issue: it’s easy to add a hook, however, simpler APIs are always better.</p>\n<h2 id=\"monitoring\"><a href=\"#monitoring\" aria-label=\"monitoring permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Monitoring</h2>\n<p>A simple monitoring interface was added to monitor statistics from deepstream:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DeepstreamMonitoring</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">onErrorLog</span> <span class=\"token punctuation\">(</span>loglevel<span class=\"token punctuation\">:</span> <span class=\"token constant\">LOG_LEVEL</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">:</span> <span class=\"token constant\">EVENT</span><span class=\"token punctuation\">,</span> logMessage<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">onLogin</span> <span class=\"token punctuation\">(</span>allowed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> endpointType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">onMessageRecieved</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">onMessageSend</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token function\">onBroadcast</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Remember that these hooks are callbacks used to recieve live updates from deepstream internals. If you want to\nquery deepstream for more verbose stats you can easily access those from <code class=\"language-text\">deepstream services</code>.</p>\n<p>For example, getting all the events subscribed to via a HTTP endpoint would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTTPMonitoringEndpoint</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DeepstreamPlugin</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Monitoring</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// setup HTTP server and implement interface</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">whenReady</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isReady<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ready'</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">addHTTPEndpoints</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span>\n            <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/events'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> eventsSubscribedTo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscriptionsRegistry</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TOPIC</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>eventsSubscribedTo<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Further endpoints can be exposed if a usecase is proposed via a feature request.</p>\n<h2 id=\"clustering\"><a href=\"#clustering\" aria-label=\"clustering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Clustering</h2>\n<p>Clustering is a touchy topic. Up to version three we had it in opensource, but given that we needed to understand our market fit and generate an actual income we took it out of V3 and added in HTTP support instead. I’m very happy to announce that although (here’s the caveat) you need to write your own message bus, we have included all the logic for actual clustering in the OS version and got over 100 complex end to end tests running with it.</p>\n<p>So how does it work?</p>\n<p>Using the following plugins:</p>\n<ul>\n<li>Cluster node</li>\n</ul>\n<p>A cluster node is the core of clustering and is responsible for serializing the messages to send, as well as subscribing to any messages in the cluster it may be interested in. The default supplied version with deepstream is a vertical message bus for use with node clustering. It’s very easy to write your own though!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DeepstreamClusterNode</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Broadcast a message to all nodes</span>\n  <span class=\"token function\">send</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">// Send a message directly to one node. When using PUB/SUB this is simply adding a `toServer` property on the payload</span>\n  <span class=\"token function\">sendDirect</span> <span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">// Subscribe to messages on the event bus</span>\n  subscribe<span class=\"token operator\">&lt;</span>SpecificMessage<span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>stateRegistryTopic<span class=\"token punctuation\">:</span> <span class=\"token constant\">TOPIC</span> <span class=\"token operator\">|</span> <span class=\"token constant\">STATE_REGISTRY_TOPIC</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">callback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">:</span> SpecificMessage<span class=\"token punctuation\">,</span> originServerName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Locks</li>\n</ul>\n<p>A lock registry allows a single node (the cluster leader) to get or release a node. This is currently implemented via a distributed central cluster nominated leader. But if you wanted to you could use a redis cache as easily and get rid of the extra step of having a leader hold onto locks!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token function-variable function\">LockCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">locked<span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">DeepstreamLockRegistry</span>  <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Request a lock that is across the entire cluster</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> LockCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">// Release the lock</span>\n  <span class=\"token function\">release</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>State Registries Factory</li>\n</ul>\n<p>The state registry is responsible for holding the state of subscriptions across the cluster. The default implementation is distributed, using add/remove and reconciliation checks. However, this is one of the more expensive operations in deepstream due to consistency checks. By being a plugin we could also use a Redis based approach, as long as we figure out how to clear down the state if a server died ungracefully.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token function-variable function\">StateRegistryCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">StateRegistry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The name is registered somewhere on the cluster</span>\n  <span class=\"token function\">has</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">// Add the name, called multiple times (so you can figure out how many subscriptions exist on one node)</span>\n  <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">// Remove the name, called multiple times</span>\n  <span class=\"token function\">remove</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n\n  <span class=\"token comment\">// Callback to whenever a name is added (only on first add)</span>\n  <span class=\"token function\">onAdd</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> StateRegistryCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n  <span class=\"token comment\">// Callback to whenever a name is removed (only on last remove)</span>\n  <span class=\"token function\">onRemove</span> <span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">:</span> StateRegistryCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n\n  <span class=\"token comment\">// Return all the names (in total or scoped to a server)</span>\n  <span class=\"token function\">getAll</span> <span class=\"token punctuation\">(</span>serverName<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// Return all the servers who have the name</span>\n  <span class=\"token function\">getAllServers</span> <span class=\"token punctuation\">(</span>subscriptionName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// Called when a server is removed from cluster for general cleanup</span>\n  <span class=\"token function\">removeAll</span> <span class=\"token punctuation\">(</span>serverName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">StateRegistryFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">DeepstreamPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Factory function</span>\n  <span class=\"token function\">getStateRegistry</span> <span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">:</span> <span class=\"token constant\">TOPIC</span> <span class=\"token operator\">|</span> <span class=\"token constant\">STATE_REGISTRY_TOPIC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> StateRegistry\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Cluster Registry</li>\n</ul>\n<p>The cluster registry is simply a registry to maintain the current state of the cluster and figure out who the leader is.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClusterRegistry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Is this node the leader?</span>\n  <span class=\"token function\">isLeader</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token comment\">// What is the server name of the leader?</span>\n  <span class=\"token function\">getLeader</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token comment\">// Get the names of all servers in the cluster</span>\n  <span class=\"token function\">getAll</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"performance-improvements\"><a href=\"#performance-improvements\" aria-label=\"performance improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance Improvements</h2>\n<p>Things have changed quite a bit in the NodeJS world. <a href=\"\">Node 10</a> came out with the inclusion of a <a href=\"\">new garbage collector</a>, async/await has changed the coding landscape, and V8 has been optimized for all the ES6 improvements. However, there’s unfortunately a bit of a dark side to all of this. In order to improve performance for the ES6 features most developers now use, the actual performance of ES5 has taken a hit. While there were talks about potentially switching to a totally different language instead a total rewrite would have been absolutely impossible. So instead we targeted what I like to call optimistic optimizations, which mean in the worst-case scenario it won’t make any difference at all, but if you’re lucky you could get boosts of multiple factors.</p>\n<p>So what falls under these optimizations?</p>\n<p>In this current release there are three parts:</p>\n<h3 id=\"lazy-data-parsing\"><a href=\"#lazy-data-parsing\" aria-label=\"lazy data parsing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy data parsing</h3>\n<p>So the downside behind using JSON as a data payload is that its not exactly fast. Without knowing your schema upfront and given that each record, event or request/response can literally contain anything, there’s little we can do currently to improve that. So what we do instead is to just ignore the whole parsing aspect altogether on the server unless needed. What this means is as far as deepstream is concerned, as long as you don’t need to access the data you’ll never actually parse it. There are three places where the data payload is actually required.</p>\n<ol>\n<li>Permissions, only if you access the <code class=\"language-text\">data</code> value.</li>\n<li>Record patches. A record patch (setting a value with a path) has to apply the patch onto the current value requiring both the previous and value to be parsed (bandwidth vs CPU usage tradeoff).</li>\n<li>Storage adaptors. This is unfortunately unavoidable currently as some storage adaptors don’t accept buffers or strings directly. This means even though we pass the data all the way to the storage SDK optimally we have to parse it just for the SDK to serialize it again =(. On that topic as well node hasn’t made it too easy with most libraries using the Buffer wrapper while ignoring the more optimal (and not so nice to use) Array Buffer. We are looking at extending our storage API’s going forward to allow deepstream to pick between a buffer and string argument to allow optimal paths when possible.</li>\n</ol>\n<h3 id=\"seperation-of-data-storage-concerns\"><a href=\"#seperation-of-data-storage-concerns\" aria-label=\"seperation of data storage concerns permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Seperation of data storage concerns</h3>\n<p>This one has been a bit of an interesting decision from day one. We initially in V1 had data stored in records with the following nesting:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    _v<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    _d<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DONE\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That just made searching an absolute pain, so what we done is transformed the data to instead store it as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    __ds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        _v<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DONE\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The reason it’s an object instead is in case we ever decided to add more metadata going forward. The issue with this, however, is we needed to load the entire record into memory and transform it whenever we want to do anything. When you start thinking in bulk (hundreds or thousands of subscriptions) the objects, CPU cycles, and immediate gc this uses is just, well, useless.</p>\n<p>So how did we decide on optimizing this? By no longer doing any of the transform logic in the core server. This means rather than deepstream calling into storage using this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span>\n    name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> \n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> __ds<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> _v<span class=\"token punctuation\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>recordData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span>\n    name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> \n    version<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> RecordData<span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It looks like a tiny change and for all our current adaptors it’s fully backwards compatible. However the goal is for us to start using things like custom Redis commands to store these entries seperately in the cache:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Example value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>recordName_version</td>\n<td>5</td>\n<td>The record version</td>\n</tr>\n<tr>\n<td>recordName_data</td>\n<td>{ “name”: “Purist” }</td>\n<td>The data untouched by deepstream</td>\n</tr>\n</tbody>\n</table>\n<p>This allows us to then do awesome things going forward like:</p>\n<ul>\n<li>Validating the the version number doesn’t conflict with the one in the cache rather than in the server, critical when clustering</li>\n<li>Only requesting the version number of records instead of the entire data-set when using offline-storage or doing a head/has</li>\n<li>Potentially storing deepstream data in a meta collection for clear seperation</li>\n</ul>\n<h3 id=\"bulk-subscription-apis\"><a href=\"#bulk-subscription-apis\" aria-label=\"bulk subscription apis permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bulk Subscription APIs</h3>\n<p>This was probably one of the biggest under the hood improvements, and although it can still be seriously optimized going forward it has already shown a huge performance boost.</p>\n<p>So whats the difference?</p>\n<p>In V3 if you’ve subscribed to a few thousand records the only optimization that would occur is that it would be sent as an individual websocket frame. So something like this (excuse the repetitiveness):</p>\n<p>Sends:</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Action</th>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE</td>\n<td>record1</td>\n</tr>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE</td>\n<td>record2</td>\n</tr>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE</td>\n<td>record3</td>\n</tr>\n</tbody>\n</table>\n<p>And would have recieved the following responses:</p>\n<p>Recieves:</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Action</th>\n<th>Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE_ACK</td>\n<td>record1</td>\n</tr>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE_ACK</td>\n<td>record2</td>\n</tr>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE_ACK</td>\n<td>record3</td>\n</tr>\n</tbody>\n</table>\n<p>Where now instead what would happen is:</p>\n<p>Recieves:</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Action</th>\n<th>Names</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE[record1, record2, record3]</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>Sends:</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Action</th>\n<th>isAck</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RECORD</td>\n<td>SUBSCRIBE</td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<p>This gives deepstream a massive boost in performance as it doesn’t have to care about individual records. However in terms of permissions it still calls into the permission handler to run them on a per name basis to ensure the same level of granualirity.</p>\n<h3 id=\"bulk-head-apis\"><a href=\"#bulk-head-apis\" aria-label=\"bulk head apis permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bulk Head APIs</h3>\n<p>The new cache now implements <code class=\"language-text\">headBulk</code> which is an insanely quicker way to do bulk hydration when a client reconnects or loads from offline.</p>\n<p>The idea being rathern than doing multiple calls to a cache, getting the response, parsing out the version and sending those one by one to the client we now just do it one go.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token function-variable function\">StorageHeadBulkCallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> versions<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> missing<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">headBulk</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> StorageHeadBulkCallback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason why we have a <code class=\"language-text\">missing</code> argument in the response is because we aren’t guaranteed that everything we requested is in the cache. If thats the case then it will load the missing records from storage using the classic recordRequest approach and send those lazily as they are loaded.</p>\n<h3 id=\"notify-api\"><a href=\"#notify-api\" aria-label=\"notify api permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notify API</h3>\n<p>Deepstream is used in multiple different ways and scenarios. Some users have played with it on their IoT devices, combining HTTP output from sensors and WebSocket connections for interactive realtime dashboards. Others have used it for communication applications and gaming. However, one thing was pretty much always a given, integrating deepstream for records into an existing app, especially one that is crud/HTTP based was a pain. Your application would\nupdate your data via your current trusted/battle-tested approach, and you just want deepstream to consume those changes. Prior to this, you would need to set the data using <code class=\"language-text\">setData</code> APIs. Not any more! As long your database is deepstream compatible (and if not, you can always write a thin StoragePlugin to conform to your standards!) then all you need to do is notify deepstream something changed in the database.</p>\n<p>Lets see code!</p>\n<p>Previously:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Pseduo DB API</span>\n<span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Now</span>\n<span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> <span class=\"token function\">httpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    topic<span class=\"token punctuation\">:</span> <span class=\"token string\">'record'</span><span class=\"token punctuation\">,</span>\n    action<span class=\"token punctuation\">:</span> <span class=\"token string\">'notify'</span><span class=\"token punctuation\">,</span>\n    names<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Okay so this doesn’t look more performant does it 😅</p>\n<p>Lets dive a tiny bit into what happens on the first.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ds<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will do the following on deepstream:\n1) Permission the record on deepstream\n2) Load the data from cache to increment version, if it doesn’t exist get from DB\n3) Set the data in database and cache\n4) Respond with a successful write\n5) Notify all interested users\n6) Send to other nodes in cluster to notify their users</p>\n<p>That is done for every single update. So if you’re updating a thousand records that’s 6000 steps. So if you’re writing things really quickly it will get quite busy quite fast. Previously we optimized this by having config-options (still supported) like <code class=\"language-text\">hotPathPrefixes</code> which skips the second step.</p>\n<p>Now with </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">await</span> <span class=\"token function\">httpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    topic<span class=\"token punctuation\">:</span> <span class=\"token string\">'record'</span><span class=\"token punctuation\">,</span>\n    action<span class=\"token punctuation\">:</span> <span class=\"token string\">'notify'</span><span class=\"token punctuation\">,</span>\n    names<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span> <span class=\"token number\">100</span> thousand names <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will do the following on deepstream:\n1) Check if the user can use notify, which is a blanket yes or no permission (god mode)\n2) Delete the data from cache using a bulkAPI\n3) Check for all active subscriptions, retrieve data from storage and set in cache (repeated)\n4) Send to other nodes in cluster to notify their users</p>\n<p>All steps other than 3 are run once, and the data is only loaded from storage if a user on that deepstream node is interested. This means that we can go down from time in minutes to milliseconds in order to get thousands of updated across!</p>\n<h2 id=\"changing-development-tools\"><a href=\"#changing-development-tools\" aria-label=\"changing development tools permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing development tools</h2>\n<p>In order to be consistent with all our other repos we have focused on minimizing the amount of variations between toolsets. As such we now have a consistent toolset of mocha, sinon and typescript for our V4 development environments. All adaptors also now use docker to run their tests, as it really simplifies testing and development for all the seperate variations.</p>","frontmatter":{"title":"Release: Deepstream 4.0","description":"The massively upgraded deepstream server! Introducing too many changes to be contained within a description!"},"fields":{"slug":"/blog/20190730-release-deepstream-4.0/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/blog/20190730-release-deepstream-4.0/index.md","weightedSlug":"/blog/20190730-release-deepstream-4.0/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/20190730-release-deepstream-4.0/","navigation":{"order":100,"release-deepstream-2.3":{"slug":"/blog/20170509-release-deepstream-2.3/","title":"Release: Deepstream 2.3","description":"Announcing the 2.3 release of deepstream.io and all the associated goodies","leaf":true,"order":20170509,"":{"order":100}},"release-deepstream-2.4":{"slug":"/blog/20170702-release-deepstream-2.4/","title":"Release: Deepstream 2.4","description":"Announcing the 2.4 release of deepstream.io","leaf":true,"order":20170702,"":{"order":100}},"release-deepstream-3.0":{"slug":"/blog/20170721-release-deepstream-3.0/","title":"Release: Deepstream 3.0","description":"a foundation for a multi-protocol-server","leaf":true,"order":20170721,"":{"order":100}},"release-clientjs-4.0":{"slug":"/blog/20190730-release-clientjs-4.0/","title":"Release: Javascript/Node 4.0","description":"The newly improved Typescript and ES6 SDK","leaf":true,"order":20190730,"":{"order":100}},"release-deepstream-4.1":{"slug":"/blog/20190830-release-deepstream-4.1/","title":"Release: Deepstream 4.1","description":"Deepstream V3 and below compatibility support!","leaf":true,"order":20190830,"":{"order":100}},"release-clientjs-4.1":{"slug":"/blog/20190905-release-clientjs-4.1/","title":"Release: Javascript/Node 4.1","description":"Default Timer Implementation","leaf":true,"order":20190905,"":{"order":100}},"release-deepstream-4.2":{"slug":"/blog/20190909-release-deepstream-4.2/","title":"Release: Deepstream 4.2","description":"MQTT AND JSON Protocol support!","leaf":true,"order":20190909,"":{"order":100}},"release-clientjs-5.0":{"slug":"/blog/20190920-release-clientjs-5.0/","title":"Release: Javascript/Node 5.0","description":"Better Typescript and MIT","leaf":true,"order":20190920,"":{"order":100}},"release-deepstream-5.0":{"slug":"/blog/20190920-release-deepstream-5.0/","title":"Release: Deepstream 5.0","description":"The MIT Resurrection","leaf":true,"order":20190920,"":{"order":100}},"realtime-search":{"slug":"/blog/20191104-realtime-search/","title":"Realtime Search","description":"The Realtime Search Evolution","leaf":true,"order":20191104,"":{"order":100}},"release-deepstream-4.0":{"slug":"/blog/20190730-release-deepstream-4.0/","title":"Release: Deepstream 4.0","description":"The massively upgraded deepstream server! Introducing too many changes to be contained within a description!","leaf":true,"order":20190730,"":{"order":100}}}}}}