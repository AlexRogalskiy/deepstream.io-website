{"componentChunkName":"component---src-templates-blog-tsx","path":"/blog/20190730-release-clientjs-4.0/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<h3 id=\"features\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features:</h3>\n<ul>\n<li>New binary protocol support (under the hood)</li>\n<li>Bulk actions support (under the hood)</li>\n<li>Full typescript declaration files</li>\n<li>Promises everywhere! Long live async/await!</li>\n<li>Offline record support</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use indexdb to store data client side</span>\n    offlineEnabled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Save each update as it comes in from the server</span>\n    saveUpdatesOffline<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    indexdb<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// The db version, incrementing this triggers a db upgrade</span>\n        dbVersion<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// This auto updates the indexdb version if the objectStore names change</span>\n        autoVersion<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The key to index records by</span>\n        primaryKey<span class=\"token punctuation\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The indexdb databae name</span>\n        storageDatabaseName<span class=\"token punctuation\">:</span> <span class=\"token string\">'deepstream'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The default store name if not using a '/' to indicate the object store (example person/uuid)</span>\n        defaultObjectStoreName<span class=\"token punctuation\">:</span> <span class=\"token string\">'records'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The object store names, required in advance due to how indexdb works</span>\n        objectStoreNames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Things to not save, such search results</span>\n        ignorePrefixes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// The amount of time to buffer together actions before making a request</span>\n        flushTimeout<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Customizable offline storage support</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> offlineStoreWriteResponse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> recordName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RecordOfflineStore</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>recordName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> RecordData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">:</span> RecordData<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> offlineStoreWriteResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n  <span class=\"token function-variable function\">delete</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">recordName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> offlineStoreWriteResponse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"improvements\"><a href=\"#improvements\" aria-label=\"improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improvements</h3>\n<ul>\n<li>Separation of errors and warnings for clarity. Non critical failures (such as an ack timeout) can now be treated separated or fully muted.</li>\n<li>Enhanced services to reduce timeout overhead</li>\n</ul>\n<h3 id=\"backwards-compatibility\"><a href=\"#backwards-compatibility\" aria-label=\"backwards compatibility permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backwards compatibility</h3>\n<ul>\n<li>Only works with V4 server</li>\n<li>All single response APIs now return promises when not providing a callback. This means most APIs that could have been chained would now break.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">deepstream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">whenReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> version <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">head</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> exists <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>presence<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error occurred'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Listening</li>\n</ul>\n<p>The listening API has been ever so slightly tweaked in order to simplify removing an active subscription.</p>\n<p>Before when an active provider was started you would usually need to store it in a higher scope, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users/.*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> isSubscribed<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> accept<span class=\"token punctuation\">,</span> reject <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSubscribed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> updateInterval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateRecord</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> updateInterval<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        listeners<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Where now we instead do:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nclient<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users/.*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> accept<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> onStop <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> updateInterval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateRecord</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>updateInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TLDR:</h2>\n<h2 id=\"binary-protocol\"><a href=\"#binary-protocol\" aria-label=\"binary protocol permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary Protocol</h2>\n<p><div class=\"markdown-fragment\"><h2>Binary Protocol</h2>\n<p>The driver behind pretty much all of the V4 refactor was our move from our old text based protocol to binary. It makes building SDKs and new features so much easier. Seriously. LIKE SO MUCH EASIER.</p>\n<p>Okay so first things first, the structure of text vs binary messages:</p>\n<h3>V3 -Text:</h3>\n<p><code>TOPIC | ACTION | meta1 | meta2 | ...metaN | payload +</code></p>\n<p>This string had the initial TOPIC and ACTION read by the parser to find out where to route it, and the rest of the data was figured out within the code module that dealt with it. This gave some benefits like only parsing a full message once its actually required, but also meant that the message parsing code was distibuted and adding for example a meta field would require lots of refactoring. Tests also had to create text based messages even when testing internal code paths. Payload serialization also didn't use JSON, but instead used a custom form of serialization to minimize bandwidth: U for undefined, <em>T</em> for true, <em>F</em> for false, <em>O</em> for object, <em>S</em> prefix for string and a <em>N</em> prefix for number.</p>\n<p>So the message object in V3 SDKs and server were like:</p>\n<pre><code class=\"language-json\">{\n    \"topic\": \"R\",\n    \"action\": \"S\",\n    \"data\": [\"A\", \"recordName\"]\n}\n</code></pre>\n<h3>V4 - Binary:</h3>\n<p>The binary protocol is implemented using protobuf. The decision to use proto was due to its wide support of other languages, it's ease of formats and how quickly we managed to get it implemented.</p>\n<p>The main message is simply this:</p>\n<pre><code class=\"language-proto\">message Message {\n  TOPIC topic = 2;\n  bytes message = 3;\n}\n</code></pre>\n<p>While individual messages use a combination of an action enum and fields.</p>\n<p>For example, the event message looks something like this:</p>\n<pre><code class=\"language-proto\">message EventMessage {\n    required EVENT_ACTION action = 1;\n    string data = 2;\n    string correlationId = 3;\n    bool isError = 4;\n    bool isAck = 5;\n    string name = 6;\n\n    repeated string names = 7;\n    string subscription = 8;\n\n    TOPIC originalTOPIC = 10;\n    EVENT_ACTION originalAction = 11;\n}\n</code></pre>\n<p>An example representation that deepstream would get translated within the JS SDKs looks like this:</p>\n<pre><code class=\"language-javascript\">{\n    \"topic\": 3,\n    \"action\": 2,\n    \"isAck\": true,\n    \"name\": \"event\"\n}\n</code></pre>\n<p>This makes writing code alot easier. At the time of writing the full message API that can be consumed is as follows:</p>\n<pre><code class=\"language-typescript\">export interface Message {\n    topic: TOPIC\n    action: ALL_ACTIONS\n    name?: string\n\n    isError?: boolean\n    isAck?: boolean\n\n    data?: string | Buffer\n    parsedData?: RecordData | RPCResult | EventData | AuthData\n\n    parseError?: false\n\n    // listen\n    subscription?: string\n\n    originalTopic?: TOPIC | STATE_REGISTRY_TOPIC\n    originalAction?: ALL_ACTIONS\n    names?: Array&#x3C;string>\n    reason?: string\n\n    // connection\n    url?: string\n    protocolVersion?: string\n\n    // record\n    isWriteAck?: boolean\n    correlationId?: string\n    path?: string\n    version?: number\n    versions?: { [index: string]: number }\n\n    // state\n    checksum?: number\n    fullState?: Array&#x3C;string>\n    serverName?: string\n    registryTopic?: TOPIC\n\n    // cluster\n    leaderScore?: number\n    externalUrl?: string,\n    role?: string\n\n    // lock\n    locked?: boolean\n}\n</code></pre>\n<p>Using this approach has made adding new features and maintaining current ones significantly easier. And the given combination of TOPICs and ACTIONs we can pretty much ensure we'll be able to extend it without running out of space any time soon.</p>\n<h3>Cons</h3>\n<p>It wouldn't be fair to say that this overhaul has no downsides. There have been some sacrifices that we had to make along the way.</p>\n<p>1) If you count messages in the billions, those extra bytes add up. Data bandwidth is quite expensive on cloud systems so lack of compression isn't just a latency issue anymore. Protobuf has some very good compression algorithms which defeats JSON objects in most cases.</p>\n<h3>Why yet another proprietary standard?</h3>\n<p>Because deepstream offers some very specific features, and has alot more on the way. For example we currently have a unique concept such as listening. Trying to use a realtime standard (which there aren't many of) would seriously hinder development. That being said deepstream allows swapping out of protocols quite easily as long as theres an interop layer so feel free to create compatibility protocols to work with your favourite SDKs!</p>\n</div></p>\n<h2 id=\"offline-storage\"><a href=\"#offline-storage\" aria-label=\"offline storage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Offline Storage</h2>\n<p>Offline storage is probably the biggest feature in 4.0. So I’m really happy to say it has been added. But offline storage is one of the hardest things we worked on due to the insane amount of states it introduces. So it’s with a bit of regret that I say you should not use it if you want to immediately go into production! What would be extremely helpful is if you have it enabled in development incase you run into issues, and hopefully once all small glitches are resolved I’ll release a 4.1 with it being officially production ready. <em>If you are using a data pattern where you don’t have to do updates via deepstream (only consuming message for visual realtime updates) then ignore that, production ready it is!</em></p>\n<p>So why use it at all? Because it gives you full record usage without a connection. Pretty slick!</p>\n<p>The way offline works is as follows (this is just one path, but most likely):</p>\n<ul>\n<li>User opens app first time, data is requested from server and stored on client side.</li>\n<li>User loses connection to app, but from an app perspective functionality remains the same</li>\n<li>User updates multiple things while offline, sets the record to dirty and updates the value in local storage</li>\n<li>User is back online</li>\n<li>Deepstream requests the version of the record on deepstream. If its the same as the one locally it sends all the modifications as the next update, it it isn’t, it requests the data and does a merge conflict.</li>\n</ul>\n<p>The reason why it would be production ready for read only scenarios is because the record is never marked as dirty, which means server side always wins:</p>\n<ul>\n<li>User opens app first time, data is requested from server and stored on client side.</li>\n<li>User loses connection to app, but from an app perspective functionality remains the same</li>\n<li>User is back online</li>\n<li>User requests the version of the record on deepstream. If its the same as the one locally it, so doesn’t do anything more. If it isn’t, it requests the data and assumes its the latest (using a remote wins algorithm).</li>\n</ul>\n<h2 id=\"typescript\"><a href=\"#typescript\" aria-label=\"typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typescript</h2>\n<p>We converted the majority of the codebase to typescript, for the benefit of future code maintenance as well making it easier for people to contribute. This also means consumers of the SDK can now directly use the generated declaration files\nwhen installing deepstream rather than maintaining separate bindings.</p>\n<h2 id=\"services\"><a href=\"#services\" aria-label=\"services permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Services</h2>\n<p>We added a few services to improve the way things work in the client.</p>\n<h3 id=\"timer-service\"><a href=\"#timer-service\" aria-label=\"timer service permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timer Service</h3>\n<p>We now have a timer service that all timers in the sdk are registered against, rather than using the native nodeJS timeouts. This gives us two benefits. First off its just generally much quicker, if you do a CPU profile of native timeouts you’ll notice the time used is noticeable, while instead we have a single interval to poll the timeout queue. Secondly it allows us to easily deal with timing slips. What this means is that in the future rather than timeouts being fired much later due to the CPU being blocked, the timer registry can either allow certain timeouts to be ignored or reset.</p>\n<h3 id=\"bulk-subscription-service\"><a href=\"#bulk-subscription-service\" aria-label=\"bulk subscription service permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bulk Subscription Service</h3>\n<p>We now register our subscriptions via a service rather than directly sending a subscription message. This allows us generate a single subscription message for up to thousands of records with a single ack rather than thousands.</p>\n<h3 id=\"connection-service\"><a href=\"#connection-service\" aria-label=\"connection service permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connection Service</h3>\n<p>We now have a connection service that is driven by a state machine that can be consumed by any class to send messages as well as listen to any connection lifecycle change.</p>\n<p>Current API hooks for reconnection logic are:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">public</span> <span class=\"token function\">onLost</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">onReestablished</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">onExitLimbo</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span></code></pre></div>\n<p>For those who looked into the SDK internals before you’ll notice the introduction of a limbo state. What this means is the connection was just lost, but you don’t want API calls to immediately start failing as a reconnect might be likely to immediately happen. As such feature developers now have the potential of buffering those requests until either the connection is reestablished or the buffer timeout is exceeded and all API calls will fail with a not connected error.</p>","frontmatter":{"title":"Release: Javascript/Node 4.0","description":"The newly improved Typescript and ES6 SDK"},"fields":{"slug":"/blog/20190730-release-clientjs-4.0/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/blog/20190730-release-clientjs-4.0/index.md","weightedSlug":"/blog/20190730-release-clientjs-4.0/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/20190730-release-clientjs-4.0/","navigation":{"order":100,"release-deepstream-2.3":{"slug":"/blog/20170509-release-deepstream-2.3/","title":"Release: Deepstream 2.3","description":"Announcing the 2.3 release of deepstream.io and all the associated goodies","leaf":true,"order":20170509,"":{"order":100}},"release-deepstream-2.4":{"slug":"/blog/20170702-release-deepstream-2.4/","title":"Release: Deepstream 2.4","description":"Announcing the 2.4 release of deepstream.io","leaf":true,"order":20170702,"":{"order":100}},"release-deepstream-3.0":{"slug":"/blog/20170721-release-deepstream-3.0/","title":"Release: Deepstream 3.0","description":"a foundation for a multi-protocol-server","leaf":true,"order":20170721,"":{"order":100}},"release-clientjs-4.0":{"slug":"/blog/20190730-release-clientjs-4.0/","title":"Release: Javascript/Node 4.0","description":"The newly improved Typescript and ES6 SDK","leaf":true,"order":20190730,"":{"order":100}},"release-deepstream-4.1":{"slug":"/blog/20190830-release-deepstream-4.1/","title":"Release: Deepstream 4.1","description":"Deepstream V3 and below compatibility support!","leaf":true,"order":20190830,"":{"order":100}},"release-clientjs-4.1":{"slug":"/blog/20190905-release-clientjs-4.1/","title":"Release: Javascript/Node 4.1","description":"Default Timer Implementation","leaf":true,"order":20190905,"":{"order":100}},"release-deepstream-4.2":{"slug":"/blog/20190909-release-deepstream-4.2/","title":"Release: Deepstream 4.2","description":"MQTT AND JSON Protocol support!","leaf":true,"order":20190909,"":{"order":100}},"release-clientjs-5.0":{"slug":"/blog/20190920-release-clientjs-5.0/","title":"Release: Javascript/Node 5.0","description":"Better Typescript and MIT","leaf":true,"order":20190920,"":{"order":100}},"release-deepstream-5.0":{"slug":"/blog/20190920-release-deepstream-5.0/","title":"Release: Deepstream 5.0","description":"The MIT Resurrection","leaf":true,"order":20190920,"":{"order":100}},"realtime-search":{"slug":"/blog/20191104-realtime-search/","title":"Realtime Search","description":"The Realtime Search Evolution","leaf":true,"order":20191104,"":{"order":100}},"release-deepstream-4.0":{"slug":"/blog/20190730-release-deepstream-4.0/","title":"Release: Deepstream 4.0","description":"The massively upgraded deepstream server! Introducing too many changes to be contained within a description!","leaf":true,"order":20190730,"":{"order":100}}}}}}