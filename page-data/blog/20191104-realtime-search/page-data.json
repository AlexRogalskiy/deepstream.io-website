{"componentChunkName":"component---src-templates-blog-tsx","path":"/blog/20191104-realtime-search/","webpackCompilationHash":"0f3352f8274dbe1392d8","result":{"data":{"markdownRemark":{"html":"<p>Realtime Search is one of the most powerful realtime concepts out there, and have been slowly been finding themselves in modern applications, regardless of the underlying technology backing it.</p>\n<p>We are proud to announce a new realtime-search process that runs next to deepstream, allowing users to create realtime functionality with barely any code, and with an extensible plugin architecture to support more databases in the future!</p>\n<p>We’ll begin our journey from a static HTTP request and end with the functionality provided\nby deepstream and the realtime-search component. You can also skip to the <a href=\"#realtime-search-finally\">last section</a> if this is just too long!</p>\n<h3 id=\"important\"><a href=\"#important\" aria-label=\"important permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important</h3>\n<p>The code presented in these examples is pseudo code which I haven’t run, and have some helper functions\nto minimize eye strain</p>\n<ul>\n<li><code class=\"language-text\">doQuery</code></li>\n</ul>\n<p>Is what you would call to run a single query against your database, which would return the results as an array</p>\n<ul>\n<li><code class=\"language-text\">makeRequest</code></li>\n</ul>\n<p>Is what you would call to make a HTTP request in your application, like a GET or POST</p>\n<ul>\n<li><code class=\"language-text\">doSomethingWithData</code></li>\n</ul>\n<p>What your application would call once your data is loaded</p>\n<ul>\n<li><code class=\"language-text\">database.table(&#39;users&#39;).on</code></li>\n</ul>\n<p>Is similar to mongodb changefeeds, which tells you whenever a table has been updated</p>\n<h3 id=\"http-requests\"><a href=\"#http-requests\" aria-label=\"http requests permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Requests</h3>\n<p>The most common technique is to perform a search is a HTTP GET with search parameters / POST with a body. It scales amazingly well with any deployment platform out there, caches results and just works.</p>\n<p>Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setInterval</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">doSomethingWithData</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to make your application update without having to refresh, you can just rerequest the data, either when a user\nperforms a refresh action or on a set interval.</p>\n<h3 id=\"push-notifications--events\"><a href=\"#push-notifications--events\" aria-label=\"push notifications  events permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push Notifications / Events</h3>\n<p>Once you have an application that can load data-dynamically, you can go one step further and add an extremely simple push layer to allow your application to be told whenever data needs to be refreshed. This allows you to continue using all the benefits of a normal HTTP application (scalability and so forth) while also getting told when to update to\nprovide quicker updates to the end user and ideally reduce the amount of polling.</p>\n<p>Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Emit an event whenever the client changes (pseduo code based on changelogs)</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  deepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users-changed'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Subscribe to the event on the client and redo query</span>\ndeepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users-changed'</span><span class=\"token punctuation\">,</span> doSomethingWithData<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Do query initially to get results</span>\n<span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">doSomethingWithData</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty useful right? This means our users no longer have to request data manually, wait for a certain timeout, extensively  poll your systems (which does get a little expensive with large deployments and cloud providers) and you can still lean back on using your normal HTTP stack for development.</p>\n<h3 id=\"static-result-notifications\"><a href=\"#static-result-notifications\" aria-label=\"static result notifications permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Result Notifications</h3>\n<p>Blindly getting told that a table changed however is still an extremely coarse action, specially the larger your table gets. You would most likely want to add some form of smarter caching so that users only get told if they really care about something.</p>\n<p>Luckily if you have static application queries this is actually quite easy!</p>\n<p>Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static-search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Emit an event whenever the client changes (pseduo code based on changelogs)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">specificQueryUpdates</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> previousResults\n    database<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">deepEquals</span><span class=\"token punctuation\">(</span>previousResults<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            deepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'specific-query-changed'</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        previousResults <span class=\"token operator\">=</span> results\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Subscribe to an event on the client</span>\ndeepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'specific-query-changed'</span><span class=\"token punctuation\">,</span> doSomethingWithData<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// We still need to get the data initially though, as events are only triggered</span>\n<span class=\"token comment\">// on changes</span>\n<span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static-search'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">doSomethingWithData</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This means we now have the ability to subscribe to a specific query event and just receive updates. The advantage\nof this is that if you have a thousand users connected, the query is still only run once and the result is sent to\nall of them, which makes it much more efficient. The disadvantages so far is the static nature of the event means we can’t really do our own custom queries, and that we have to do the event initially which means we have to maintain two different types of APIs. Not cool.</p>\n<h3 id=\"dynamic-result-notifications\"><a href=\"#dynamic-result-notifications\" aria-label=\"dynamic result notifications permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Result Notifications</h3>\n<p>So how can we let the backend know to setup an endpoint for a custom query, maintain it\nduring the queries lifetime and then when it’s no longer needed discard it? 🤔 There are different solutions, but the one we see most often is:</p>\n<ul>\n<li>Request a query by telling the client to start</li>\n<li>Get updates</li>\n<li>Discard it when your done</li>\n</ul>\n<p>In a classical event system this would usually be done as follows (for this example you need to have sticky sessions available in order for the close event to go the same process as the open one)</p>\n<p>Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> searches <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/start-search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Hash the query so that you can use it as a lookup key</span>\n    <span class=\"token keyword\">const</span> searchReference <span class=\"token operator\">=</span> <span class=\"token function\">hashSearch</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> search <span class=\"token operator\">=</span> searches<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>searchReference<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// If the query already exists, someone already started it, so</span>\n    <span class=\"token comment\">// bump up the usage number and return the last results</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>searches<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>searchReference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> search <span class=\"token operator\">=</span> searches<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>searchReference<span class=\"token punctuation\">)</span>\n        search<span class=\"token punctuation\">.</span>usage <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>usage <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            reference<span class=\"token punctuation\">:</span> search<span class=\"token punctuation\">.</span>reference<span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">:</span> search<span class=\"token punctuation\">.</span>previousResult\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Setup the cursor </span>\n    <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">deepEquals</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span>previousResults<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            deepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>searchReference<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        search<span class=\"token punctuation\">.</span>previousResults <span class=\"token operator\">=</span> results\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Set the search so new requests won't setup another cursor</span>\n    searches<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>searchReference<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        usage<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        reference<span class=\"token punctuation\">:</span> searchReference<span class=\"token punctuation\">,</span>\n        cursor\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Do the actual initial search to avoid it having to be done on the </span>\n    <span class=\"token comment\">// client side</span>\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Send the response</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n        reference<span class=\"token punctuation\">:</span> search<span class=\"token punctuation\">.</span>reference<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> results\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/stop-search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reference <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">const</span> search <span class=\"token operator\">=</span> searches<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>references<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        search<span class=\"token punctuation\">.</span>usages <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>usages <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">.</span>usages <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            searches<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>reference<span class=\"token punctuation\">)</span>\n            search<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Creating the search</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> reference<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/start-search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'gt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">:</span> <span class=\"token string\">'users'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ndeepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>reference<span class=\"token punctuation\">,</span> doSomethingWithData<span class=\"token punctuation\">)</span>\n<span class=\"token function\">doSomethingWithData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ending the search</span>\ndeepstream<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span>reference<span class=\"token punctuation\">)</span>\n<span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/stop-search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> reference <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Okay so that’s alot of code. Probably a good place to stop before writing an actual service. Let us break down the pros and cons of this approach (ignoring potential bugs due to pseudo nature!):</p>\n<h4 id=\"pros\"><a href=\"#pros\" aria-label=\"pros permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pros</h4>\n<ul>\n<li>Minimal amount of cursors open</li>\n<li>Basic lifecycle support means that if the clients always cleaned up after themselves system can go back to\noriginal state</li>\n<li>We can proxy multiple realtime search queries easily. Not very useful for infinite permutations (like text searches) but if your search is limited or you have built in default searches (like pagination or limits) it would scale well</li>\n</ul>\n<h4 id=\"cons\"><a href=\"#cons\" aria-label=\"cons permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cons</h4>\n<ul>\n<li>If you want to scale you’ll need to attach to a third party cache/database (the norm nowadays for distributed/scaling systems)</li>\n<li>You can call start-search / end-search multiple times and it would get the state out of sync</li>\n<li>Most importantly, since its not really tied into the session if your connection drops or you force close your client\nstate is incorrect</li>\n</ul>\n<h3 id=\"dynamic-result-notifications-using-deepstream\"><a href=\"#dynamic-result-notifications-using-deepstream\" aria-label=\"dynamic result notifications using deepstream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Result Notifications Using Deepstream</h3>\n<p>Right so now we are going to rewrite the above code using deepstream APIs. I’ll be using <code class=\"language-text\">listening</code>, a powerful API that allows deepstream to notify clients/services whenever a subscription has been added or removed to the system, which removes most of the boiler plate management. I’ll also be using RPCs and Records, mainly because it removes us having to use HTTP and automatically saves things in the cache. It’s also 95% of the way to explaining how the realtime-search was built.</p>\n<p>Service:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">deepstream<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime_search'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hashSearch</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> deepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error creating a hash'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndeepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime_search/list_.*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token regex\">/realtime_search\\/list_(.*)/</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> deepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">const</span> cursor <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> previousResults <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> deepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">deepEquals</span><span class=\"token punctuation\">(</span>previousResults<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            deepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">doQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    deepstream<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cursor<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Client:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Creating the search</span>\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime_search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'gt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">:</span> <span class=\"token string\">'users'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> record <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getRecord</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">realtime_search/list_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\nrecord<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something with results</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ending the search</span>\nrecord<span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let us see what cons this managed to resolve:</p>\n<ul>\n<li>Scaling</li>\n</ul>\n<p>Listening on deepstream uses an active publisher pattern. This means only one service in a cluster can ever\nbe responsible for a subscription. This means you can scale your services and servers and the load will automatically be\ndistributed against them.</p>\n<ul>\n<li>Cache/Storage</li>\n</ul>\n<p>Using deepstream records we automatically have our data saved to cache. This means by using it we get the benefit\nof distributed state out of the box, so if another user subscribes to the same record the micro service won’t even need to be told about it</p>\n<ul>\n<li>State</li>\n</ul>\n<p>All the connection state and logic is handled by deepstream, which means if your client goes down, deepstream will\nclean up all your subscriptions on your behalf. This allows the platform to continue running optimally. So state getting out of sync isn’t your concern</p>\n<p><em>Hint</em></p>\n<p>The listen pattern can be used for so much more than just this usecase!</p>\n<h3 id=\"realtime-search-finally\"><a href=\"#realtime-search-finally\" aria-label=\"realtime search finally permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Realtime Search, Finally!</h3>\n<p>Okay I really hope you made it this far! Let’s look at how realtime-search APIs work.</p>\n<p>On the server we don’t need to actually write any server code, you just have to run the realtime-search service. You can run it via docker <a href=\"https://hub.docker.com/r/deepstreamio/realtime-search\">deepstreamio/realtime-search</a>, but it’s also shipped via node under the <a href=\"https://www.npmjs.com/package/@deepstream/realtime-search\">@deepstream/realtime-search</a> package.</p>\n<p>We will be following the <a href=\"https://github.com/deepstreamIO/deepstream.io-realtime-search/tree/master/example\">example found in the github repo</a>. This will use docker compose, which is useful as we need to setup a mongodb replica as well as run deepstream and the realtime-search service for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/deepstreamIO/deepstream.io-realtime-search.git\n<span class=\"token builtin class-name\">cd</span> deepstream.io-realtime-search/example\ndocker-compose up</code></pre></div>\n<p>Giving us the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> Initializing MongoDB Connection\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> Connected successfully to mongodb database deepstream\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> Initializing Deepstream connection\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> Successfully logged <span class=\"token keyword\">in</span> to deepstream\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> Providing rpc method <span class=\"token string\">\"realtime_search\"</span>\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> listening <span class=\"token keyword\">for</span> realtime_search/list_.*\n<span class=\"token number\">11</span>:53:13 AM <span class=\"token operator\">|</span> realtime search provider ready</code></pre></div>\n<p>And then on the client side you would just need to do the same thing we mentioned earlier:</p>\n<p>Client:\n<div class=\"gatsby-highlight\">\n        <pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> DeepstreamClient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>  <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@deepstream/client'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">app</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeepstreamClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:6020'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Let us set some dummy data to filter down later</span>\n    <span class=\"token comment\">// Setting them sync isn't best practice but makes for prettier demo code</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/12345'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/54321'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">60</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/32154'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Joseph'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// And now we search!</span>\n\n    <span class=\"token comment\">/**\n     * In order to do the search we call an RPC with the table and query parameters\n     * The query parameters are tuples of three:\n     * \n     * [fieldName, operator, value]\n     * \n     * Where the operators can be one of:\n     * \n     * [ eq, ne, match, gt, ge, lt, le, in, contains ]\n     * \n     * And you can AND them together by just having more:\n     * \n     * [[fieldName, operator, value], [fieldName, operator, value], [fieldName, operator, value]]\n     */</span>\n    <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>rpc<span class=\"token punctuation\">.</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token string\">'realtime_search'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        table<span class=\"token punctuation\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// age greater than equal to 30</span>\n        query<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gt'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> resultList <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">realtime_search/list_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    resultList<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Results</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Let us change a users age, if everything is working correctly </span>\n    <span class=\"token comment\">// it should trigger the above console almost instantly</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">setDataWithAck</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user/32154'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Joseph'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n        </div></p>\n<p>And that’s it! As you can see getting realtime-results couldn’t be easier. </p>\n<p>For a front-end example, more config options and permissions please checkout the <a href=\"/guides/realtime-search/intro/\">realtime-search guide</a>. </p>\n<p>Thanks for reading!</p>","frontmatter":{"title":"Realtime Search","description":"The Realtime Search Evolution"},"fields":{"slug":"/blog/20191104-realtime-search/","githubLink":"https://github.com/deepstreamIO/deepstream.io-website/blob/master/content/blog/20191104-realtime-search/index.md","weightedSlug":"/blog/20191104-realtime-search/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/20191104-realtime-search/","navigation":{"order":100,"release-deepstream-2.3":{"slug":"/blog/20170509-release-deepstream-2.3/","title":"Release: Deepstream 2.3","description":"Announcing the 2.3 release of deepstream.io and all the associated goodies","leaf":true,"order":20170509,"":{"order":100}},"release-deepstream-2.4":{"slug":"/blog/20170702-release-deepstream-2.4/","title":"Release: Deepstream 2.4","description":"Announcing the 2.4 release of deepstream.io","leaf":true,"order":20170702,"":{"order":100}},"release-deepstream-3.0":{"slug":"/blog/20170721-release-deepstream-3.0/","title":"Release: Deepstream 3.0","description":"a foundation for a multi-protocol-server","leaf":true,"order":20170721,"":{"order":100}},"release-clientjs-4.0":{"slug":"/blog/20190730-release-clientjs-4.0/","title":"Release: Javascript/Node 4.0","description":"The newly improved Typescript and ES6 SDK","leaf":true,"order":20190730,"":{"order":100}},"release-deepstream-4.1":{"slug":"/blog/20190830-release-deepstream-4.1/","title":"Release: Deepstream 4.1","description":"Deepstream V3 and below compatibility support!","leaf":true,"order":20190830,"":{"order":100}},"release-clientjs-4.1":{"slug":"/blog/20190905-release-clientjs-4.1/","title":"Release: Javascript/Node 4.1","description":"Default Timer Implementation","leaf":true,"order":20190905,"":{"order":100}},"release-deepstream-4.2":{"slug":"/blog/20190909-release-deepstream-4.2/","title":"Release: Deepstream 4.2","description":"MQTT AND JSON Protocol support!","leaf":true,"order":20190909,"":{"order":100}},"release-clientjs-5.0":{"slug":"/blog/20190920-release-clientjs-5.0/","title":"Release: Javascript/Node 5.0","description":"Better Typescript and MIT","leaf":true,"order":20190920,"":{"order":100}},"release-deepstream-5.0":{"slug":"/blog/20190920-release-deepstream-5.0/","title":"Release: Deepstream 5.0","description":"The MIT Resurrection","leaf":true,"order":20190920,"":{"order":100}},"realtime-search":{"slug":"/blog/20191104-realtime-search/","title":"Realtime Search","description":"The Realtime Search Evolution","leaf":true,"order":20191104,"":{"order":100}},"release-deepstream-4.0":{"slug":"/blog/20190730-release-deepstream-4.0/","title":"Release: Deepstream 4.0","description":"The massively upgraded deepstream server! Introducing too many changes to be contained within a description!","leaf":true,"order":20190730,"":{"order":100}}}}}}